
(function(lychee, global) {

	let environment = lychee.deserialize({"constructor":"lychee.Environment","arguments":[{"id":"/libraries/strainer/dist","debug":false,"timeout":5000,"target":"strainer.Main","type":"build","tags":{"platform":["html"]}}],"blob":{"definitions":{"strainer.Main":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.Main","url":"/libraries/strainer/source/Main.js"}],"blob":{"attaches":{},"requires":["strainer.flow.Check"],"includes":["lychee.event.Emitter"],"exports":"function (lychee, global, attachments) {\n\n\tconst _lychee  = lychee.import('lychee');\n\tconst _Emitter = lychee.import('lychee.event.Emitter');\n\tconst _flow    = lychee.import('strainer.flow');\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Composite = function(settings) {\n\n\t\tthis.settings = _lychee.assignunlink({\n\t\t\taction:  null,\n\t\t\tproject: null\n\t\t}, settings);\n\n\t\tthis.defaults = _lychee.assignunlink({\n\t\t\taction:  null,\n\t\t\tproject: null\n\t\t}, this.settings);\n\n\n\t\t_Emitter.call(this);\n\n\n\n\t\t/*\n\t\t * INITIALIZATION\n\t\t */\n\n\t\tthis.bind('load', function() {\n\n\t\t\tlet action  = this.settings.action  || null;\n\t\t\tlet project = this.settings.project || null;\n\n\t\t\tif (action !== null && project !== null) {\n\n\t\t\t\tlychee.ROOT.project                           = _lychee.ROOT.lychee + project;\n\t\t\t\tlychee.environment.global.lychee.ROOT.project = _lychee.ROOT.lychee + project;\n\n\n\t\t\t\tthis.trigger('init', [ project, action ]);\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error('strainer: FAILURE (\"' + project + '\") at \"load\" event');\n\n\t\t\t\tthis.destroy(1);\n\n\t\t\t}\n\n\t\t}, this, true);\n\n\t\tthis.bind('init', function(project, action) {\n\n\t\t\tlet flow = null;\n\t\t\tlet name = action.charAt(0).toUpperCase() + action.substr(1);\n\n\t\t\tif (_flow[name] !== undefined) {\n\n\t\t\t\tflow = new _flow[name]({\n\t\t\t\t\tsandbox:  project,\n\t\t\t\t\tsettings: this.settings\n\t\t\t\t});\n\n\t\t\t}\n\n\n\t\t\tif (flow !== null) {\n\n\t\t\t\tflow.bind('complete', function() {\n\n\t\t\t\t\tif (flow.errors.length === 0) {\n\n\t\t\t\t\t\tconsole.info('strainer: SUCCESS (\"' + project + '\")');\n\n\t\t\t\t\t\tthis.destroy(0);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tflow.errors.forEach(function(err) {\n\n\t\t\t\t\t\t\tlet path = err.url;\n\t\t\t\t\t\t\tlet rule = err.rule    || 'parser-error';\n\t\t\t\t\t\t\tlet line = err.line    || 0;\n\t\t\t\t\t\t\tlet col  = err.column  || 0;\n\t\t\t\t\t\t\tlet msg  = err.message || 'Parsing error: unknown';\n\t\t\t\t\t\t\tif (msg.endsWith('.') === false) {\n\t\t\t\t\t\t\t\tmsg = msg.trim() + '.';\n\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\tlet message = '';\n\n\t\t\t\t\t\t\tmessage += path;\n\t\t\t\t\t\t\tmessage += ':' + line;\n\t\t\t\t\t\t\tmessage += ':' + col;\n\t\t\t\t\t\t\tmessage += ': ' + msg;\n\t\t\t\t\t\t\tmessage += ' [' + rule + ']';\n\n\t\t\t\t\t\t\tif (err.rule.startsWith('unguessable-')) {\n\t\t\t\t\t\t\t\tconsole.warn('strainer: ' + message);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.error('strainer: ' + message);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconsole.error('strainer: FAILURE (\"' + project + '\")');\n\n\t\t\t\t\t\tthis.destroy(1);\n\n\t\t\t\t\t}\n\n\t\t\t\t}, this);\n\n\t\t\t\tflow.bind('error', function(event) {\n\n\t\t\t\t\tconsole.error('strainer: FAILURE (\"' + project + '\") at \"' + event + '\" event');\n\n\t\t\t\t\tthis.destroy(1);\n\n\t\t\t\t}, this);\n\n\n\t\t\t\tflow.init();\n\n\t\t\t}\n\n\n\t\t\treturn true;\n\n\t\t}, this, true);\n\n\t};\n\n\n\tComposite.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\tlet data = _Emitter.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'strainer.Main';\n\n\n\t\t\tlet settings = _lychee.assignunlink({}, this.settings);\n\t\t\tlet blob     = data['blob'] || {};\n\n\n\t\t\tdata['arguments'][0] = settings;\n\t\t\tdata['blob']         = Object.keys(blob).length > 0 ? blob : null;\n\n\n\t\t\treturn data;\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * MAIN API\n\t\t */\n\n\t\tinit: function() {\n\n\t\t\tthis.trigger('load');\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tdestroy: function(code) {\n\n\t\t\tcode = typeof code === 'number' ? code : 0;\n\n\n\t\t\tthis.trigger('destroy', [ code ]);\n\n\t\t\treturn true;\n\n\t\t}\n\n\t};\n\n\n\treturn Composite;\n\n}"}},"lychee.event.Emitter":{"constructor":"lychee.Definition","arguments":[{"id":"lychee.event.Emitter","url":"/libraries/lychee/source/event/Emitter.js"}],"blob":{"attaches":{},"exports":"function (lychee, global, attachments) {\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _bind = function(event, callback, scope, once) {\n\n\t\tif (event === null || callback === null) {\n\t\t\treturn false;\n\t\t}\n\n\n\t\tlet pass_event = false;\n\t\tlet pass_self  = false;\n\n\t\tlet modifier = event.charAt(0);\n\t\tif (modifier === '@') {\n\n\t\t\tevent      = event.substr(1, event.length - 1);\n\t\t\tpass_event = true;\n\n\t\t} else if (modifier === '#') {\n\n\t\t\tevent     = event.substr(1, event.length - 1);\n\t\t\tpass_self = true;\n\n\t\t}\n\n\n\t\tif (this.___events[event] === undefined) {\n\t\t\tthis.___events[event] = [];\n\t\t}\n\n\n\t\tthis.___events[event].push({\n\t\t\tpass_event: pass_event,\n\t\t\tpass_self:  pass_self,\n\t\t\tcallback:   callback,\n\t\t\tscope:      scope,\n\t\t\tonce:       once\n\t\t});\n\n\n\t\treturn true;\n\n\t};\n\n\tconst _relay = function(event, instance, once) {\n\n\t\tif (event === null || instance === null) {\n\t\t\treturn false;\n\t\t}\n\n\n\t\tlet callback = function() {\n\n\t\t\tlet event = arguments[0];\n\t\t\tlet data  = [];\n\n\t\t\tfor (let a = 1, al = arguments.length; a < al; a++) {\n\t\t\t\tdata.push(arguments[a]);\n\t\t\t}\n\n\t\t\tthis.trigger(event, data);\n\n\t\t};\n\n\n\t\tif (this.___events[event] === undefined) {\n\t\t\tthis.___events[event] = [];\n\t\t}\n\n\n\t\tthis.___events[event].push({\n\t\t\tpass_event: true,\n\t\t\tpass_self:  false,\n\t\t\tcallback:   callback,\n\t\t\tscope:      instance,\n\t\t\tonce:       once\n\t\t});\n\n\n\t\treturn true;\n\n\t};\n\n\tconst _trigger = function(event, data) {\n\n\t\tif (this.___events !== undefined && this.___events[event] !== undefined) {\n\n\t\t\tlet value = undefined;\n\n\t\t\tfor (let e = 0; e < this.___events[event].length; e++) {\n\n\t\t\t\tlet args  = [];\n\t\t\t\tlet entry = this.___events[event][e];\n\n\t\t\t\tif (entry.pass_event === true) {\n\n\t\t\t\t\targs.push(event);\n\n\t\t\t\t} else if (entry.pass_self === true) {\n\n\t\t\t\t\targs.push(this);\n\n\t\t\t\t}\n\n\n\t\t\t\tif (data !== null) {\n\t\t\t\t\targs.push.apply(args, data);\n\t\t\t\t}\n\n\n\t\t\t\tlet result = entry.callback.apply(entry.scope, args);\n\t\t\t\tif (result !== undefined) {\n\t\t\t\t\tvalue = result;\n\t\t\t\t}\n\n\n\t\t\t\tif (entry.once === true) {\n\n\t\t\t\t\tif (this.unbind(event, entry.callback, entry.scope) === true) {\n\t\t\t\t\t\te--;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn false;\n\n\t};\n\n\tconst _unbind = function(event, callback, scope) {\n\n\t\tlet found = false;\n\n\t\tif (event !== null) {\n\n\t\t\tfound = _unbind_event.call(this, event, callback, scope);\n\n\t\t} else {\n\n\t\t\tfor (event in this.___events) {\n\n\t\t\t\tlet result = _unbind_event.call(this, event, callback, scope);\n\t\t\t\tif (result === true) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn found;\n\n\t};\n\n\tconst _unbind_event = function(event, callback, scope) {\n\n\t\tif (this.___events !== undefined && this.___events[event] !== undefined) {\n\n\t\t\tlet found = false;\n\n\t\t\tfor (let e = 0, el = this.___events[event].length; e < el; e++) {\n\n\t\t\t\tlet entry = this.___events[event][e];\n\n\t\t\t\tif ((callback === null || entry.callback === callback) && (scope === null || entry.scope === scope)) {\n\n\t\t\t\t\tfound = true;\n\n\t\t\t\t\tthis.___events[event].splice(e, 1);\n\t\t\t\t\tel--;\n\t\t\t\t\te--;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn found;\n\n\t\t}\n\n\n\t\treturn false;\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Composite = function() {\n\n\t\tthis.___events   = {};\n\t\tthis.___timeline = {\n\t\t\tbind:    [],\n\t\t\ttrigger: [],\n\t\t\trelay:   [],\n\t\t\tunbind:  []\n\t\t};\n\n\t};\n\n\n\tComposite.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\tdeserialize: function(blob) {\n\n\t\t\tif (blob.events instanceof Object) {\n\t\t\t\t// TODO: deserialize events\n\t\t\t}\n\n\t\t\tif (blob.timeline instanceof Object) {\n\t\t\t\t// TODO: deserialize timeline\n\t\t\t}\n\n\t\t},\n\n\t\tserialize: function() {\n\n\t\t\tlet blob = {};\n\n\n\t\t\tif (Object.keys(this.___events).length > 0) {\n\n\t\t\t\tblob.events = {};\n\n\t\t\t\tfor (let event in this.___events) {\n\n\t\t\t\t\tblob.events[event] = [];\n\n\t\t\t\t\tfor (let e = 0, el = this.___events[event].length; e < el; e++) {\n\n\t\t\t\t\t\tlet entry = this.___events[event][e];\n\n\t\t\t\t\t\tblob.events[event].push({\n\t\t\t\t\t\t\tpass_event: entry.pass_event,\n\t\t\t\t\t\t\tpass_self:  entry.pass_self,\n\t\t\t\t\t\t\tcallback:   lychee.serialize(entry.callback),\n\t\t\t\t\t\t\t// scope:      lychee.serialize(entry.scope),\n\t\t\t\t\t\t\tscope:      null,\n\t\t\t\t\t\t\tonce:       entry.once\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (this.___timeline.bind.length > 0 || this.___timeline.trigger.length > 0 || this.___timeline.unbind.length > 0) {\n\n\t\t\t\tblob.timeline = {};\n\n\n\t\t\t\tif (this.___timeline.bind.length > 0) {\n\n\t\t\t\t\tblob.timeline.bind = [];\n\n\t\t\t\t\tfor (let b = 0, bl = this.___timeline.bind.length; b < bl; b++) {\n\t\t\t\t\t\tblob.timeline.bind.push(this.___timeline.bind[b]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif (this.___timeline.trigger.length > 0) {\n\n\t\t\t\t\tblob.timeline.trigger = [];\n\n\t\t\t\t\tfor (let t = 0, tl = this.___timeline.trigger.length; t < tl; t++) {\n\t\t\t\t\t\tblob.timeline.trigger.push(this.___timeline.trigger[t]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif (this.___timeline.unbind.length > 0) {\n\n\t\t\t\t\tblob.timeline.unbind = [];\n\n\t\t\t\t\tfor (let u = 0, ul = this.___timeline.unbind.length; u < ul; u++) {\n\t\t\t\t\t\tblob.timeline.unbind.push(this.___timeline.unbind[u]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn {\n\t\t\t\t'constructor': 'lychee.event.Emitter',\n\t\t\t\t'arguments':   [],\n\t\t\t\t'blob':        Object.keys(blob).length > 0 ? blob : null\n\t\t\t};\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CUSTOM API\n\t\t */\n\n\t\tbind: function(event, callback, scope, once) {\n\n\t\t\tevent    = typeof event === 'string'    ? event    : null;\n\t\t\tcallback = callback instanceof Function ? callback : null;\n\t\t\tscope    = scope !== undefined          ? scope    : this;\n\t\t\tonce     = once === true;\n\n\n\t\t\tlet result = _bind.call(this, event, callback, scope, once);\n\t\t\tif (result === true && lychee.debug === true) {\n\n\t\t\t\tthis.___timeline.bind.push({\n\t\t\t\t\ttime:     Date.now(),\n\t\t\t\t\tevent:    event,\n\t\t\t\t\tcallback: lychee.serialize(callback),\n\t\t\t\t\t// scope:    lychee.serialize(scope),\n\t\t\t\t\tscope:    null,\n\t\t\t\t\tonce:     once\n\t\t\t\t});\n\n\t\t\t}\n\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\trelay: function(event, instance, once) {\n\n\t\t\tevent    = typeof event === 'string'               ? event    : null;\n\t\t\tinstance = lychee.interfaceof(Composite, instance) ? instance : null;\n\t\t\tonce     = once === true;\n\n\n\t\t\tlet result = _relay.call(this, event, instance, once);\n\t\t\tif (result === true && lychee.debug === true) {\n\n\t\t\t\tthis.___timeline.relay.push({\n\t\t\t\t\ttime:     Date.now(),\n\t\t\t\t\tevent:    event,\n\t\t\t\t\tinstance: lychee.serialize(instance),\n\t\t\t\t\tonce:     once\n\t\t\t\t});\n\n\t\t\t}\n\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\ttrigger: function(event, data) {\n\n\t\t\tevent = typeof event === 'string' ? event : null;\n\t\t\tdata  = data instanceof Array     ? data  : null;\n\n\n\t\t\tlet result = _trigger.call(this, event, data);\n\t\t\tif (result === true && lychee.debug === true) {\n\n\t\t\t\tthis.___timeline.trigger.push({\n\t\t\t\t\ttime:  Date.now(),\n\t\t\t\t\tevent: event,\n\t\t\t\t\tdata:  lychee.serialize(data)\n\t\t\t\t});\n\n\t\t\t}\n\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\tunbind: function(event, callback, scope) {\n\n\t\t\tevent    = typeof event === 'string'    ? event    : null;\n\t\t\tcallback = callback instanceof Function ? callback : null;\n\t\t\tscope    = scope !== undefined          ? scope    : null;\n\n\n\t\t\tlet result = _unbind.call(this, event, callback, scope);\n\t\t\tif (result === true) {\n\n\t\t\t\tthis.___timeline.unbind.push({\n\t\t\t\t\ttime:     Date.now(),\n\t\t\t\t\tevent:    event,\n\t\t\t\t\tcallback: lychee.serialize(callback),\n\t\t\t\t\t// scope:    lychee.serialize(scope)\n\t\t\t\t\tscope:    null\n\t\t\t\t});\n\n\t\t\t}\n\n\n\t\t\treturn result;\n\n\t\t}\n\n\t};\n\n\n\treturn Composite;\n\n}"}},"strainer.flow.Check":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.flow.Check","url":"/libraries/strainer/source/flow/Check.js"}],"blob":{"attaches":{},"requires":["lychee.Stash","strainer.api.PARSER","strainer.plugin.API","strainer.plugin.ESLINT"],"includes":["lychee.event.Flow"],"exports":"function (lychee, global, attachments) {\n\n\tconst _plugin    = {\n\t\tAPI:    lychee.import('strainer.plugin.API'),\n\t\tESLINT: lychee.import('strainer.plugin.ESLINT')\n\t};\n\tconst _Flow      = lychee.import('lychee.event.Flow');\n\tconst _Stash     = lychee.import('lychee.Stash');\n\tconst _PARSER    = lychee.import('strainer.api.PARSER');\n\tconst _PLATFORMS = lychee.PLATFORMS;\n\tconst _STASH     = new _Stash({\n\t\ttype: _Stash.TYPE.persistent\n\t});\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _walk_directory = function(files, node, path, attachments) {\n\n\t\tif (node instanceof Array) {\n\n\t\t\tif (node.indexOf('js') !== -1) {\n\t\t\t\tfiles.push(path + '.js');\n\t\t\t}\n\n\t\t\tif (attachments === true) {\n\n\t\t\t\tnode.filter(function(ext) {\n\t\t\t\t\treturn ext !== 'js';\n\t\t\t\t}).forEach(function(ext) {\n\t\t\t\t\tfiles.push(path + '.' + ext);\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t} else if (node instanceof Object) {\n\n\t\t\tObject.keys(node).forEach(function(child) {\n\t\t\t\t_walk_directory(files, node[child], path + '/' + child, attachments);\n\t\t\t});\n\n\t\t}\n\n\t};\n\n\tconst _trace_dependencies = function() {\n\n\t\tlet configs      = this.configs;\n\t\tlet dependencies = [];\n\n\t\tconfigs.filter(function(config) {\n\t\t\treturn config !== null;\n\t\t}).map(function(config) {\n\t\t\treturn config.buffer.header || { requires: [], includes: [] };\n\t\t}).forEach(function(header) {\n\n\t\t\tif (header.requires.length > 0) {\n\n\t\t\t\theader.requires.forEach(function(id) {\n\n\t\t\t\t\tif (dependencies.indexOf(id) === -1) {\n\t\t\t\t\t\tdependencies.push(id);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t\tif (header.includes.length > 0) {\n\n\t\t\t\theader.includes.forEach(function(id) {\n\n\t\t\t\t\tif (dependencies.indexOf(id) === -1) {\n\t\t\t\t\t\tdependencies.push(id);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t});\n\n\t\tdependencies = dependencies.filter(function(identifier) {\n\n\t\t\tlet config = configs.find(function(other) {\n\n\t\t\t\tlet buffer = other.buffer;\n\t\t\t\tif (buffer !== null) {\n\t\t\t\t\treturn identifier === buffer.header.identifier;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t}) || null;\n\n\t\t\tif (config !== null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t});\n\n\t\treturn dependencies;\n\n\t};\n\n\tconst _trace_memory = function(memory, chunk, scope) {\n\n\t\tscope = scope instanceof Object ? scope : null;\n\n\n\t\tlet values = [];\n\n\n\t\tif (chunk.startsWith('_')) {\n\n\t\t\tlet tmp      = chunk.split('.');\n\t\t\tlet variable = memory[tmp.shift()];\n\n\t\t\tif (variable !== undefined) {\n\n\t\t\t\tif (variable.value !== undefined) {\n\n\t\t\t\t\tlet identifier = variable.value.reference;\n\t\t\t\t\tlet config     = this.configs.find(function(other) {\n\n\t\t\t\t\t\tif (other !== null) {\n\n\t\t\t\t\t\t\tlet buffer = other.buffer;\n\t\t\t\t\t\t\tif (buffer !== null) {\n\t\t\t\t\t\t\t\treturn identifier === buffer.header.identifier;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}) || null;\n\n\t\t\t\t\tif (config !== null) {\n\n\t\t\t\t\t\tlet memory = config.buffer.memory;\n\t\t\t\t\t\tlet result = config.buffer.result;\n\t\t\t\t\t\tlet check  = tmp.shift();\n\n\t\t\t\t\t\tif (check === 'prototype') {\n\n\t\t\t\t\t\t\tlet mid    = tmp.shift();\n\t\t\t\t\t\t\tlet method = _trace_method.call(this, mid, config);\n\t\t\t\t\t\t\tif (method !== null) {\n\n\t\t\t\t\t\t\t\tif (method.values.length === 1) {\n\n\t\t\t\t\t\t\t\t\tlet value = method.values[0];\n\t\t\t\t\t\t\t\t\tif (value.type === 'undefined' && value.chunk !== undefined) {\n\t\t\t\t\t\t\t\t\t\treturn _trace_memory.call(this, memory, value.chunk, scope);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tfor (let v = 0, vl = method.values.length; v < vl; v++) {\n\t\t\t\t\t\t\t\t\t\tvalues.push(method.values[v]);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if (check === check.toUpperCase()) {\n\n\t\t\t\t\t\t\tlet enam = result.enums[check] || null;\n\t\t\t\t\t\t\tif (enam !== null) {\n\n\t\t\t\t\t\t\t\tlet name  = tmp.shift();\n\t\t\t\t\t\t\t\tlet value = enam.values.find(function(val) {\n\t\t\t\t\t\t\t\t\treturn val.name === name;\n\t\t\t\t\t\t\t\t}) || null;\n\n\t\t\t\t\t\t\t\tif (value !== null) {\n\n\t\t\t\t\t\t\t\t\tvalues.push({\n\t\t\t\t\t\t\t\t\t\tchunk: chunk,\n\t\t\t\t\t\t\t\t\t\ttype:  value.value.type,\n\t\t\t\t\t\t\t\t\t\tvalue: value.value.value\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if (variable.values !== undefined) {\n\n\t\t\t\t\tlet check = tmp.shift();\n\t\t\t\t\tif (check.startsWith('call(') || check.startsWith('(')) {\n\n\t\t\t\t\t\tfor (let v = 0, vl = variable.values.length; v < vl; v++) {\n\t\t\t\t\t\t\tvalues.push(variable.values[v]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if (chunk.startsWith('this.')) {\n\n\t\t\tlet path    = chunk.split('.').slice(1);\n\t\t\tlet pointer = scope[path[0]] || null;\n\t\t\tif (pointer !== null) {\n\n\t\t\t\tif (pointer.value !== undefined && pointer.value.type === 'Object') {\n\n\t\t\t\t\tlet tmp = pointer.value.value;\n\t\t\t\t\tif (tmp instanceof Object) {\n\n\t\t\t\t\t\tfor (let p = 1, pl = path.length; p < pl; p++) {\n\n\t\t\t\t\t\t\tlet prop = path[p];\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t/^([A-Za-z0-9_]+)$/g.test(prop)\n\t\t\t\t\t\t\t\t&& pointer.value !== undefined\n\t\t\t\t\t\t\t\t&& pointer.value.type === 'Object'\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\tpointer = _PARSER.detect(pointer.value.value[prop]);\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tpointer = null;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (pointer !== null) {\n\t\t\t\t\tvalues.push(pointer);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn values;\n\n\t};\n\n\tconst _trace_method = function(mid, config) {\n\n\t\tlet configs = this.configs;\n\t\tlet header  = config.buffer.header;\n\t\tlet result  = config.buffer.result;\n\n\n\t\tlet found = null;\n\n\t\tif (result.methods[mid] !== undefined) {\n\n\t\t\tfound = result.methods[mid];\n\n\t\t} else {\n\n\t\t\tfor (let i = 0, il = header.includes.length; i < il; i++) {\n\n\t\t\t\tlet identifier = header.includes[i];\n\t\t\t\tlet definition = configs.find(function(other) {\n\n\t\t\t\t\tlet buffer = other.buffer;\n\t\t\t\t\tif (buffer !== null) {\n\t\t\t\t\t\treturn identifier === buffer.header.identifier;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}) || null;\n\n\t\t\t\tif (definition !== null) {\n\n\t\t\t\t\tlet check = _trace_method.call(this, mid, definition);\n\t\t\t\t\tif (check !== null) {\n\t\t\t\t\t\tfound = check;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn found;\n\n\t};\n\n\tconst _package_files = function(json) {\n\n\t\tlet files = [];\n\n\n\t\tif (json !== null) {\n\n\t\t\tlet root = json.source.files || null;\n\t\t\tif (root !== null) {\n\t\t\t\t_walk_directory(files, root, '', false);\n\t\t\t}\n\n\n\t\t\tfiles = files.map(function(value) {\n\t\t\t\treturn value.substr(1);\n\t\t\t}).filter(function(value) {\n\t\t\t\treturn value.endsWith('bootstrap.js') === false;\n\t\t\t}).filter(function(value) {\n\t\t\t\treturn value.endsWith('features.js') === false;\n\t\t\t}).filter(function(value) {\n\t\t\t\treturn value.indexOf('__') === -1;\n\t\t\t}).sort();\n\n\t\t}\n\n\n\t\treturn files;\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Composite = function(data) {\n\n\t\tlet settings = Object.assign({}, data);\n\n\n\t\tthis.checks   = [];\n\t\tthis.codes    = [];\n\t\tthis.configs  = [];\n\t\tthis.errors   = [];\n\t\tthis.sandbox  = '';\n\t\tthis.settings = {};\n\t\tthis.stash    = new _Stash({\n\t\t\ttype: _Stash.TYPE.persistent\n\t\t});\n\n\t\tthis.__pkg      = null;\n\t\tthis.__packages = {};\n\n\n\t\tthis.setSandbox(settings.sandbox);\n\t\tthis.setSettings(settings.settings);\n\n\n\t\t_Flow.call(this);\n\n\t\tsettings = null;\n\n\n\n\t\t/*\n\t\t * INITIALIZATION\n\t\t */\n\n\t\tthis.bind('read', function(oncomplete) {\n\n\t\t\tlet that    = this;\n\t\t\tlet project = this.settings.project;\n\t\t\tlet sandbox = this.sandbox;\n\t\t\tlet stash   = this.stash;\n\n\t\t\tif (sandbox !== '' && stash !== null) {\n\n\t\t\t\tconsole.log('strainer: READ ' + project);\n\n\t\t\t\tthis.__pkg        = new Config(sandbox + '/lychee.pkg');\n\t\t\t\tthis.__pkg.onload = function(result) {\n\n\t\t\t\t\tif (result === true) {\n\n\t\t\t\t\t\tlet files = _package_files(this.buffer);\n\t\t\t\t\t\tif (files.length > 0) {\n\n\t\t\t\t\t\t\tstash.bind('batch', function(type, assets) {\n\n\t\t\t\t\t\t\t\tthis.codes = assets.filter(function(asset) {\n\t\t\t\t\t\t\t\t\treturn asset !== null;\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\toncomplete(true);\n\n\t\t\t\t\t\t\t}, that, true);\n\n\t\t\t\t\t\t\tstash.batch('read', files.map(function(value) {\n\t\t\t\t\t\t\t\treturn sandbox + '/source/' + value;\n\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\toncomplete(false);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\toncomplete(false);\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.__pkg.load();\n\n\t\t\t} else {\n\n\t\t\t\toncomplete(false);\n\n\t\t\t}\n\n\t\t}, this);\n\n\t\tthis.bind('check-eslint', function(oncomplete) {\n\n\t\t\tlet eslint  = _plugin.ESLINT || null;\n\t\t\tlet errors  = this.errors;\n\t\t\tlet project = this.settings.project;\n\n\t\t\tif (eslint !== null) {\n\n\t\t\t\tconsole.log('strainer: CHECK-ESLINT ' + project);\n\n\t\t\t\tthis.checks = this.codes.map(function(asset) {\n\n\t\t\t\t\tlet result         = [];\n\t\t\t\t\tlet eslint_report  = _plugin.ESLINT.check(asset);\n\t\t\t\t\tlet eslint_unfixed = _plugin.ESLINT.fix(asset, eslint_report);\n\n\t\t\t\t\tif (eslint_report.length > 0 && eslint_unfixed.length === 0) {\n\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t} else if (eslint_unfixed.length > 0) {\n\n\t\t\t\t\t\teslint_unfixed.map(function(err) {\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\turl:     asset.url,\n\t\t\t\t\t\t\t\trule:    err.ruleId  || 'parser-error',\n\t\t\t\t\t\t\t\tline:    err.line    || 0,\n\t\t\t\t\t\t\t\tcolumn:  err.column  || 0,\n\t\t\t\t\t\t\t\tmessage: err.message || ''\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t}).forEach(function(err) {\n\n\t\t\t\t\t\t\tresult.push(err);\n\t\t\t\t\t\t\terrors.push(err);\n\n\t\t\t\t\t\t});\n\n\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t});\n\n\n\t\t\t\toncomplete(true);\n\n\t\t\t} else {\n\n\t\t\t\toncomplete(false);\n\n\t\t\t}\n\n\t\t}, this);\n\n\t\tthis.bind('check-api', function(oncomplete) {\n\n\t\t\tlet api     = _plugin.API || null;\n\t\t\tlet errors  = this.errors;\n\t\t\tlet project = this.settings.project;\n\n\t\t\tif (api !== null) {\n\n\t\t\t\tconsole.log('strainer: CHECK-API ' + project);\n\n\n\t\t\t\tthis.configs = this.codes.map(function(asset) {\n\n\t\t\t\t\tlet result      = [];\n\t\t\t\t\tlet api_report  = _plugin.API.check(asset);\n\t\t\t\t\tlet api_unfixed = _plugin.API.fix(asset, api_report);\n\n\t\t\t\t\tif (api_report !== null) {\n\n\t\t\t\t\t\tif (api_unfixed.length > 0) {\n\n\t\t\t\t\t\t\tapi_unfixed.forEach(function(err) {\n\n\t\t\t\t\t\t\t\tresult.push(err);\n\t\t\t\t\t\t\t\terrors.push(err);\n\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tapi_report.errors = result;\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif (asset.url.includes('/source/')) {\n\n\t\t\t\t\t\t\tlet url    = asset.url.replace(/source/, 'api').replace(/\\.js$/, '.json');\n\t\t\t\t\t\t\tlet config = new lychee.Asset(url, 'json', true);\n\t\t\t\t\t\t\tif (config !== null) {\n\t\t\t\t\t\t\t\tconfig.buffer = api_report;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn config;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t});\n\n\n\t\t\t\toncomplete(true);\n\n\t\t\t} else {\n\n\t\t\t\toncomplete(false);\n\n\t\t\t}\n\n\t\t}, this);\n\n\t\tthis.bind('trace-pkgs', function(oncomplete) {\n\n\t\t\tlet errors  = this.errors;\n\t\t\tlet pkg     = this.__pkg;\n\t\t\tlet project = this.settings.project;\n\t\t\tlet sandbox = this.sandbox;\n\n\t\t\tif (pkg !== null) {\n\n\t\t\t\tconsole.log('strainer: TRACE-PKGS ' + project);\n\n\n\t\t\t\tlet packages     = this.__packages;\n\t\t\t\tlet environments = pkg.buffer.build.environments || null;\n\t\t\t\tif (environments !== null) {\n\n\t\t\t\t\tfor (let id in environments) {\n\n\t\t\t\t\t\tlet pkgs = environments[id].packages || null;\n\t\t\t\t\t\tif (pkgs instanceof Array) {\n\n\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\turl:     pkg.url,\n\t\t\t\t\t\t\t\trule:    'pkg-error',\n\t\t\t\t\t\t\t\tline:    0,\n\t\t\t\t\t\t\t\tcolumn:  0,\n\t\t\t\t\t\t\t\tmessage: 'Invalid settings for Environment \"' + id + '\" (Invalid packages).'\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t} else if (pkgs instanceof Object) {\n\n\t\t\t\t\t\t\tfor (let ns in pkgs) {\n\n\t\t\t\t\t\t\t\tlet url = pkgs[ns];\n\t\t\t\t\t\t\t\tif (url === './lychee.pkg') {\n\t\t\t\t\t\t\t\t\turl = sandbox + '/lychee.pkg';\n\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\tif (packages[ns] === undefined) {\n\n\t\t\t\t\t\t\t\t\tpackages[ns] = new lychee.Package({\n\t\t\t\t\t\t\t\t\t\tid:  ns,\n\t\t\t\t\t\t\t\t\t\turl: url\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t} else if (packages[ns].url !== url) {\n\n\t\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\t\turl:     pkg.url,\n\t\t\t\t\t\t\t\t\t\trule:    'pkg-error',\n\t\t\t\t\t\t\t\t\t\tline:    0,\n\t\t\t\t\t\t\t\t\t\tcolumn:  0,\n\t\t\t\t\t\t\t\t\t\tmessage: 'Invalid settings for Package \"' + ns + '\" in Environment \"' + id + '\" (Invalid url).'\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (packages['lychee'] === undefined) {\n\t\t\t\t\tpackages['lychee'] = new lychee.Package({\n\t\t\t\t\t\tid:  'lychee',\n\t\t\t\t\t\turl: '/libraries/lychee/lychee.pkg'\n\t\t\t\t\t});\n\t\t\t\t}\n\n\n\t\t\t\tlet interval_end = Date.now() + 1000;\n\t\t\t\tlet interval_id  = setInterval(function() {\n\n\t\t\t\t\tlet all_ready = true;\n\n\t\t\t\t\tfor (let ns in packages) {\n\n\t\t\t\t\t\tlet pkg = packages[ns];\n\t\t\t\t\t\tif (pkg.config === null) {\n\t\t\t\t\t\t\tall_ready = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (all_ready === true) {\n\n\t\t\t\t\t\tclearInterval(interval_id);\n\t\t\t\t\t\toncomplete(true);\n\n\t\t\t\t\t} else if (Date.now() > interval_end) {\n\n\t\t\t\t\t\tfor (let ns in packages) {\n\n\t\t\t\t\t\t\tlet pkg = packages[ns];\n\t\t\t\t\t\t\tif (pkg.config === null) {\n\n\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\turl:     pkg.url,\n\t\t\t\t\t\t\t\t\trule:    'pkg-error',\n\t\t\t\t\t\t\t\t\tline:    0,\n\t\t\t\t\t\t\t\t\tcolumn:  0,\n\t\t\t\t\t\t\t\t\tmessage: 'Invalid Package \"' + ns + '\".'\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclearInterval(interval_id);\n\t\t\t\t\t\toncomplete(true);\n\n\t\t\t\t\t}\n\n\t\t\t\t}, 100);\n\n\t\t\t} else {\n\n\t\t\t\toncomplete(false);\n\n\t\t\t}\n\n\t\t}, this);\n\n\n\t\tthis.bind('trace-deps', function(oncomplete) {\n\n\t\t\tlet packages = this.__packages;\n\t\t\tlet project  = this.settings.project;\n\t\t\tlet stash    = this.stash;\n\n\t\t\tif (stash !== null) {\n\n\t\t\t\tlet dependencies = _trace_dependencies.call(this);\n\t\t\t\tif (dependencies.length > 0) {\n\n\t\t\t\t\tconsole.log('strainer: TRACE-DEPS ' + project + ' (' + dependencies.length + ')');\n\n\n\t\t\t\t\tlet candidates = [];\n\n\t\t\t\t\tdependencies.forEach(function(identifier) {\n\n\t\t\t\t\t\tlet ns  = identifier.split('.')[0];\n\t\t\t\t\t\tlet id  = identifier.split('.').slice(1).join('.');\n\t\t\t\t\t\tlet pkg = packages[ns] || null;\n\t\t\t\t\t\tif (pkg !== null) {\n\n\t\t\t\t\t\t\tlet prefix = pkg.url.split('/').slice(0, -1).join('/');\n\t\t\t\t\t\t\tlet found  = false;\n\n\t\t\t\t\t\t\tlet resolved = pkg.resolve(id, null);\n\t\t\t\t\t\t\tif (resolved.length > 0) {\n\t\t\t\t\t\t\t\tcandidates.push(prefix + '/api/' + resolved[0] + '.json');\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\tif (found === false) {\n\n\t\t\t\t\t\t\t\tresolved = pkg.resolve(id, {\n\t\t\t\t\t\t\t\t\tplatforms: _PLATFORMS\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (resolved.length > 0) {\n\n\t\t\t\t\t\t\t\t\tresolved.forEach(function(path) {\n\t\t\t\t\t\t\t\t\t\tcandidates.push(prefix + '/api/' + path + '.json');\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\n\t\t\t\t\tif (candidates.length > 0) {\n\n\t\t\t\t\t\tstash.bind('batch', function(type, assets) {\n\n\t\t\t\t\t\t\tfor (let a = 0, al = assets.length; a < al; a++) {\n\n\t\t\t\t\t\t\t\tlet asset = assets[a];\n\t\t\t\t\t\t\t\tif (asset !== null && asset.buffer !== null) {\n\t\t\t\t\t\t\t\t\tthis.configs.push(asset);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsetTimeout(function() {\n\n\t\t\t\t\t\t\t\tlet unknown_deps = _trace_dependencies.call(this).filter(function(dependency) {\n\t\t\t\t\t\t\t\t\treturn dependencies.includes(dependency) === false;\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (unknown_deps.length > 0) {\n\n\t\t\t\t\t\t\t\t\tthis.trigger('trace-deps', [ oncomplete ]);\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\toncomplete(true);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}.bind(this), 100);\n\n\t\t\t\t\t\t}, this, true);\n\n\t\t\t\t\t\tstash.batch('read', candidates);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\toncomplete(true);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\toncomplete(true);\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\toncomplete(false);\n\n\t\t\t}\n\n\t\t}, this);\n\n\t\tthis.bind('trace-api', function(oncomplete) {\n\n\t\t\tlet that    = this;\n\t\t\tlet errors  = this.errors;\n\t\t\tlet configs = this.configs;\n\t\t\tlet project = this.settings.project;\n\n\t\t\tif (configs.length > 0) {\n\n\t\t\t\tconsole.log('strainer: TRACE-API ' + project);\n\n\n\t\t\t\tconfigs.filter(function(config) {\n\t\t\t\t\treturn config !== null;\n\t\t\t\t}).forEach(function(config) {\n\n\t\t\t\t\tlet result     = config.buffer.result;\n\t\t\t\t\tlet memory     = config.buffer.memory;\n\t\t\t\t\tlet methods    = result.methods    || {};\n\t\t\t\t\tlet properties = result.properties || {};\n\t\t\t\t\tlet scope      = properties;\n\n\t\t\t\t\tfor (let pid in properties) {\n\n\t\t\t\t\t\tlet value = properties[pid].value;\n\t\t\t\t\t\tif (value.type === 'undefined' && value.chunk !== undefined) {\n\n\t\t\t\t\t\t\tlet references = _trace_memory.call(that, memory, value.chunk, scope);\n\t\t\t\t\t\t\tif (references.length === 1) {\n\n\t\t\t\t\t\t\t\tproperties[pid].value = references[0];\n\n\n\t\t\t\t\t\t\t\tlet error = config.buffer.errors.find(function(err) {\n\t\t\t\t\t\t\t\t\treturn err.rule === 'unguessable-property-value' && err.message.includes('\"' + pid + '\"');\n\t\t\t\t\t\t\t\t}) || null;\n\n\t\t\t\t\t\t\t\tif (error !== null) {\n\n\t\t\t\t\t\t\t\t\tlet e0 = errors.indexOf(error);\n\t\t\t\t\t\t\t\t\tlet e1 = config.buffer.errors.indexOf(error);\n\n\t\t\t\t\t\t\t\t\tif (e0 !== -1) {\n\t\t\t\t\t\t\t\t\t\terrors.splice(e0, 1);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (e1 !== -1) {\n\t\t\t\t\t\t\t\t\t\tconfig.buffer.errors.splice(e1, 1);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tfor (let mid in methods) {\n\n\t\t\t\t\t\tlet values = methods[mid].values;\n\t\t\t\t\t\tif (values.length > 0) {\n\n\t\t\t\t\t\t\tfor (let v = 0, vl = values.length; v < vl; v++) {\n\n\t\t\t\t\t\t\t\tlet value = values[v];\n\t\t\t\t\t\t\t\tif (value.type === 'undefined' && value.chunk !== undefined) {\n\n\t\t\t\t\t\t\t\t\tlet references = _trace_memory.call(that, memory, value.chunk, scope);\n\t\t\t\t\t\t\t\t\tif (references.length > 0) {\n\n\t\t\t\t\t\t\t\t\t\tvalues.splice(v, 1);\n\t\t\t\t\t\t\t\t\t\tvl--;\n\t\t\t\t\t\t\t\t\t\tv--;\n\n\t\t\t\t\t\t\t\t\t\tfor (let r = 0, rl = references.length; r < rl; r++) {\n\n\t\t\t\t\t\t\t\t\t\t\tlet reference = references[r];\n\t\t\t\t\t\t\t\t\t\t\tif (values.indexOf(reference) === -1) {\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.push(reference);\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\t\tlet error = config.buffer.errors.find(function(err) {\n\t\t\t\t\t\t\t\t\t\t\treturn err.rule === 'unguessable-return-value' && err.message.includes('\"' + mid + '()\"');\n\t\t\t\t\t\t\t\t\t\t}) || null;\n\n\t\t\t\t\t\t\t\t\t\tif (error !== null) {\n\n\t\t\t\t\t\t\t\t\t\t\tlet e0 = errors.indexOf(error);\n\t\t\t\t\t\t\t\t\t\t\tlet e1 = config.buffer.errors.indexOf(error);\n\n\t\t\t\t\t\t\t\t\t\t\tif (e0 !== -1) {\n\t\t\t\t\t\t\t\t\t\t\t\terrors.splice(e0, 1);\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (e1 !== -1) {\n\t\t\t\t\t\t\t\t\t\t\t\tconfig.buffer.errors.splice(e1, 1);\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t}\n\n\n\t\t\toncomplete(true);\n\n\t\t}, this);\n\n\t\tthis.bind('clean-deps', function(oncomplete) {\n\n\t\t\tlet configs = this.configs;\n\t\t\tlet project = this.settings.project;\n\t\t\tlet sandbox = this.sandbox;\n\n\n\t\t\tlet cleaned_deps = 0;\n\n\t\t\tfor (let c = 0, cl = configs.length; c < cl; c++) {\n\n\t\t\t\tlet config = configs[c];\n\t\t\t\tif (config !== null) {\n\n\t\t\t\t\tif (config.url.startsWith(sandbox) === false) {\n\n\t\t\t\t\t\tcleaned_deps++;\n\t\t\t\t\t\tconfigs.splice(c, 1);\n\t\t\t\t\t\tcl--;\n\t\t\t\t\t\tc--;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.log('strainer: CLEAN-DEPS ' + project + ' (' + cleaned_deps + ')');\n\n\n\t\t\toncomplete(true);\n\n\t\t}, this);\n\n\t\tthis.bind('write-codes', function(oncomplete) {\n\n\t\t\tlet project = this.settings.project;\n\t\t\tlet stash   = this.stash;\n\n\t\t\tif (project !== null && stash !== null) {\n\n\t\t\t\tconsole.log('strainer: WRITE-CODES ' + project);\n\n\n\t\t\t\tlet checks  = this.checks;\n\t\t\t\tlet codes   = this.codes.filter(function(code, c) {\n\t\t\t\t\treturn code._MODIFIED === true;\n\t\t\t\t});\n\n\t\t\t\tif (codes.length > 0) {\n\n\t\t\t\t\tstash.bind('batch', function(type, assets) {\n\n\t\t\t\t\t\tif (assets.length === codes.length) {\n\t\t\t\t\t\t\toncomplete(true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toncomplete(false);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}, this, true);\n\n\t\t\t\t\tstash.batch('write', codes.map(function(code) {\n\t\t\t\t\t\treturn code.url;\n\t\t\t\t\t}), codes);\n\n\t\t\t\t} else {\n\n\t\t\t\t\toncomplete(true);\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\toncomplete(false);\n\n\t\t\t}\n\n\t\t}, this);\n\n\t\tthis.bind('write-api', function(oncomplete) {\n\n\t\t\tlet project = this.settings.project;\n\t\t\tlet stash   = this.stash;\n\n\t\t\tif (project !== null && stash !== null) {\n\n\t\t\t\tconsole.log('strainer: WRITE-API ' + project);\n\n\n\t\t\t\tlet configs = this.configs.filter(function(config, c) {\n\t\t\t\t\treturn config !== null;\n\t\t\t\t});\n\n\n\t\t\t\tif (configs.length > 0) {\n\n\t\t\t\t\tstash.bind('batch', function(type, assets) {\n\n\t\t\t\t\t\tif (assets.length === configs.length) {\n\t\t\t\t\t\t\toncomplete(true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toncomplete(false);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}, this, true);\n\n\t\t\t\t\tstash.batch('write', configs.map(function(config) {\n\t\t\t\t\t\treturn config.url;\n\t\t\t\t\t}), configs);\n\n\t\t\t\t} else {\n\n\t\t\t\t\toncomplete(true);\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\toncomplete(false);\n\n\t\t\t}\n\n\t\t}, this);\n\n\t\tthis.bind('write-pkg', function(oncomplete) {\n\n\t\t\tlet project = this.settings.project;\n\t\t\tlet stash   = this.stash;\n\n\t\t\tif (project !== null && stash !== null) {\n\n\t\t\t\tconsole.log('strainer: WRITE-PKG ' + project);\n\n\n\t\t\t\tlet configs = this.configs.filter(function(config) {\n\t\t\t\t\treturn config !== null;\n\t\t\t\t});\n\n\n\t\t\t\tif (configs.length > 0) {\n\n\t\t\t\t\tlet index = stash.read(project + '/api/strainer.pkg');\n\n\t\t\t\t\tindex.onload = function(result) {\n\n\t\t\t\t\t\tif (result === false) {\n\t\t\t\t\t\t\tthis.buffer = {};\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tlet buffer = this.buffer;\n\n\t\t\t\t\t\tfor (let c = 0, cl = configs.length; c < cl; c++) {\n\n\t\t\t\t\t\t\tlet config     = configs[c];\n\t\t\t\t\t\t\tlet identifier = config.buffer.header.identifier;\n\t\t\t\t\t\t\tlet knowledge  = {};\n\t\t\t\t\t\t\tlet result     = config.buffer.result;\n\n\n\t\t\t\t\t\t\tknowledge.settings   = Object.keys(result.settings);\n\t\t\t\t\t\t\tknowledge.properties = Object.keys(result.properties);\n\t\t\t\t\t\t\tknowledge.enums      = Object.keys(result.enums);\n\t\t\t\t\t\t\tknowledge.events     = Object.keys(result.events);\n\t\t\t\t\t\t\tknowledge.methods    = Object.keys(result.methods).map(function(mid) {\n\t\t\t\t\t\t\t\treturn [ mid, result.methods[mid].hash ];\n\t\t\t\t\t\t\t});\n\n\n\t\t\t\t\t\t\tbuffer[config.url] = {\n\t\t\t\t\t\t\t\tidentifier: identifier,\n\t\t\t\t\t\t\t\ttimestamp:  Date.now(),\n\t\t\t\t\t\t\t\tknowledge:  knowledge\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tstash.write(index.url, index);\n\t\t\t\t\t\tstash.sync();\n\n\t\t\t\t\t\toncomplete(true);\n\n\t\t\t\t\t};\n\n\t\t\t\t\tindex.load();\n\n\t\t\t\t} else {\n\n\t\t\t\t\toncomplete(true);\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\toncomplete(false);\n\n\t\t\t}\n\n\t\t}, this);\n\n\n\n\t\t/*\n\t\t * FLOW\n\t\t */\n\n\t\tthis.then('read');\n\n\t\tthis.then('check-eslint');\n\t\tthis.then('check-api');\n\n\t\tthis.then('trace-pkgs');\n\t\tthis.then('trace-deps');\n\t\tthis.then('trace-api');\n\t\tthis.then('clean-deps');\n\n\t\tthis.then('write-codes');\n\t\tthis.then('write-api');\n\t\tthis.then('write-pkg');\n\n\t};\n\n\n\tComposite.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\tdeserialize: function(blob) {\n\n\t\t\tif (blob.codes instanceof Array) {\n\n\t\t\t\tlet codes = [];\n\n\t\t\t\tfor (let bc1 = 0, bc1l = blob.codes.length; bc1 < bc1l; bc1++) {\n\t\t\t\t\tcodes.push(lychee.deserialize(blob.codes[bc1]));\n\t\t\t\t}\n\n\t\t\t\tif (codes.length > 0) {\n\n\t\t\t\t\tthis.codes = codes.filter(function(asset) {\n\t\t\t\t\t\treturn asset !== null;\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (blob.configs instanceof Array) {\n\n\t\t\t\tlet configs = [];\n\n\t\t\t\tfor (let bc2 = 0, bc2l = blob.configs.length; bc2 < bc2l; bc2++) {\n\t\t\t\t\tconfigs.push(lychee.deserialize(blob.codes[bc2]));\n\t\t\t\t}\n\n\t\t\t\tif (configs.length > 0) {\n\n\t\t\t\t\tthis.configs = configs.filter(function(asset) {\n\t\t\t\t\t\treturn asset !== null;\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tlet stash = lychee.deserialize(blob.stash);\n\t\t\tif (stash !== null) {\n\t\t\t\tthis.stash = stash;\n\t\t\t}\n\n\t\t},\n\n\t\tserialize: function() {\n\n\t\t\tlet data = _Flow.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'strainer.flow.Check';\n\n\n\t\t\tlet settings = data['arguments'][0] || {};\n\t\t\tlet blob     = data['blob'] || {};\n\n\n\t\t\tif (this.sandbox !== '')                   settings.sandbox  = this.sandbox;\n\t\t\tif (Object.keys(this.settings).length > 0) settings.settings = this.settings;\n\n\n\t\t\tif (this.stash !== null)     blob.stash   = lychee.serialize(this.stash);\n\t\t\tif (this.codes.length > 0)   blob.codes   = this.codes.map(lychee.serialize);\n\t\t\tif (this.configs.length > 0) blob.configs = this.configs.map(lychee.serialize);\n\n\n\t\t\tdata['arguments'][0] = settings;\n\t\t\tdata['blob']         = Object.keys(blob).length > 0 ? blob : null;\n\n\n\t\t\treturn data;\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CUSTOM API\n\t\t */\n\n\t\tsetSandbox: function(sandbox) {\n\n\t\t\tsandbox = typeof sandbox === 'string' ? sandbox : null;\n\n\n\t\t\tif (sandbox !== null) {\n\n\t\t\t\tthis.sandbox = sandbox;\n\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tsetSettings: function(settings) {\n\n\t\t\tsettings = settings instanceof Object ? settings : null;\n\n\n\t\t\tif (settings !== null) {\n\n\t\t\t\tthis.settings = settings;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n\n\treturn Composite;\n\n}"}},"lychee.event.Flow":{"constructor":"lychee.Definition","arguments":[{"id":"lychee.event.Flow","url":"/libraries/lychee/source/event/Flow.js"}],"blob":{"attaches":{},"includes":["lychee.event.Emitter"],"exports":"function (lychee, global, attachments) {\n\n\tconst _Emitter = lychee.import('lychee.event.Emitter');\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _process_recursive = function(event, result) {\n\n\t\tif (result === true) {\n\n\t\t\tif (this.___timeout === null) {\n\n\t\t\t\tthis.___timeout = setTimeout(function() {\n\n\t\t\t\t\tthis.___timeout = null;\n\t\t\t\t\t_process_stack.call(this);\n\n\t\t\t\t}.bind(this), 0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.trigger('error', [ event ]);\n\n\t\t}\n\n\t};\n\n\tconst _process_stack = function() {\n\n\t\tlet entry = this.___stack.shift() || null;\n\t\tif (entry !== null) {\n\n\t\t\tlet data  = entry.data;\n\t\t\tlet event = entry.event;\n\t\t\tlet args  = [ event, [] ];\n\n\t\t\tif (data !== null) {\n\t\t\t\targs[1].push.apply(args[1], data);\n\t\t\t}\n\n\t\t\targs[1].push(_process_recursive.bind(this, event));\n\n\n\t\t\tlet result = this.trigger.apply(this, args);\n\t\t\tif (result === false) {\n\t\t\t\tthis.trigger('error', [ event ]);\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.trigger('complete');\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Composite = function() {\n\n\t\tthis.___init    = false;\n\t\tthis.___stack   = [];\n\t\tthis.___timeout = null;\n\n\t\t_Emitter.call(this);\n\n\t};\n\n\n\tComposite.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\tlet data = _Emitter.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'lychee.event.Flow';\n\n\t\t\tlet blob = (data['blob'] || {});\n\n\n\t\t\tif (this.___stack.length > 0) {\n\n\t\t\t\tblob.stack = [];\n\n\t\t\t\tfor (let s = 0, sl = this.___stack.length; s < sl; s++) {\n\n\t\t\t\t\tlet entry = this.___stack[s];\n\n\t\t\t\t\tblob.stack.push({\n\t\t\t\t\t\tevent: entry.event,\n\t\t\t\t\t\tdata:  lychee.serialize(entry.data)\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tdata['blob'] = Object.keys(blob).length > 0 ? blob : null;\n\n\n\t\t\treturn data;\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CUSTOM API\n\t\t */\n\n\t\tthen: function(event, data) {\n\n\t\t\tevent = typeof event === 'string' ? event : null;\n\t\t\tdata  = data instanceof Array     ? data  : null;\n\n\n\t\t\tif (event !== null) {\n\n\t\t\t\tthis.___stack.push({\n\t\t\t\t\tevent: event,\n\t\t\t\t\tdata:  data\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tinit: function() {\n\n\t\t\tif (this.___init === false) {\n\n\t\t\t\tthis.___init = true;\n\n\n\t\t\t\tif (this.___stack.length > 0) {\n\n\t\t\t\t\t_process_stack.call(this);\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n\n\treturn Composite;\n\n}"}},"lychee.Stash":{"constructor":"lychee.Definition","arguments":[{"id":"lychee.Stash","url":"/libraries/lychee/source/platform/html/Stash.js"}],"blob":{"attaches":{},"tags":{"platform":"html"},"includes":["lychee.event.Emitter"],"supports":"function (lychee, global) {\n\n\tif (\n\t\ttypeof global.Storage !== 'undefined'\n\t\t&& typeof global.localStorage === 'object'\n\t) {\n\t\treturn true;\n\t}\n\n\n\treturn true;\n\n}","exports":"function (lychee, global, attachments) {\n\n\tlet   _id         = 0;\n\tconst _Emitter    = lychee.import('lychee.event.Emitter');\n\tconst _JSON       = {\n\t\tencode: JSON.stringify,\n\t\tdecode: JSON.parse\n\t};\n\tconst _PERSISTENT = {\n\t\tdata: {},\n\t\tread: function() {\n\t\t\treturn null;\n\t\t},\n\t\twrite: function(id, asset) {\n\t\t\treturn false;\n\t\t}\n\t};\n\tconst _TEMPORARY  = {\n\t\tdata: {},\n\t\tread: function() {\n\n\t\t\tif (Object.keys(this.data).length > 0) {\n\t\t\t\treturn this.data;\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\t\twrite: function(id, asset) {\n\n\t\t\tif (asset !== null) {\n\t\t\t\tthis.data[id] = asset;\n\t\t\t} else {\n\t\t\t\tdelete this.data[id];\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\t};\n\n\n\n\t/*\n\t * FEATURE DETECTION\n\t */\n\n\t(function() {\n\n\t\tlet local   = false;\n\t\tlet session = true;\n\n\n\t\ttry {\n\n\t\t\tlocal = 'localStorage' in global;\n\n\t\t\t// XXX: Security Error\n\t\t\tglobal.localStorage.getItem('lychee-Stash-PERSISTENT');\n\n\t\t} catch (err) {\n\t\t\tlocal = false;\n\t\t}\n\n\n\t\tif (local === true) {\n\n\t\t\t_PERSISTENT.read = function() {\n\n\t\t\t\tthis.data = _JSON.decode(global.localStorage.getItem('lychee-Stash-PERSISTENT'));\n\n\n\t\t\t\tlet blob = {};\n\n\t\t\t\tfor (let id in this.data) {\n\t\t\t\t\tblob[id] = lychee.deserialize(this.data[id]);\n\t\t\t\t}\n\n\t\t\t\treturn Object.keys(blob).length > 0 ? blob : null;\n\n\t\t\t};\n\n\t\t\t_PERSISTENT.write = function(id, asset) {\n\n\t\t\t\tlet path = lychee.environment.resolve(id);\n\t\t\t\tif (path.startsWith(lychee.ROOT.project)) {\n\n\t\t\t\t\tif (asset !== null) {\n\n\t\t\t\t\t\tlet data = lychee.serialize(asset);\n\t\t\t\t\t\tif (data !== null && data.blob !== null && typeof data.blob.buffer === 'string') {\n\n\t\t\t\t\t\t\tlet index = data.blob.buffer.indexOf('base64,') + 7;\n\t\t\t\t\t\t\tif (index > 7) {\n\t\t\t\t\t\t\t\tthis.data[id] = data;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.data[id] = null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tglobal.localStorage.setItem('lychee-Stash-PERSISTENT', _JSON.encode(this.data));\n\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\n\t\t\t(function() {\n\n\t\t\t\tlet data = _JSON.decode(global.localStorage.getItem('lychee-Stash-PERSISTENT'));\n\t\t\t\tif (data !== null) {\n\n\t\t\t\t\tfor (let id in data) {\n\t\t\t\t\t\t_PERSISTENT.data[id] = data[id];\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t})();\n\n\t\t}\n\n\n\t\tif (lychee.debug === true) {\n\n\t\t\tlet methods = [];\n\n\t\t\tif (local)   methods.push('Persistent');\n\t\t\tif (session) methods.push('Temporary');\n\n\n\t\t\tif (methods.length === 0) {\n\t\t\t\tconsole.error('lychee.Stash: Supported methods are NONE');\n\t\t\t} else {\n\t\t\t\tconsole.info('lychee.Stash: Supported methods are ' + methods.join(', '));\n\t\t\t}\n\n\t\t}\n\n\t})();\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _validate_asset = function(asset) {\n\n\t\tif (asset instanceof Object && typeof asset.serialize === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst _on_batch_remove = function(stash, others) {\n\n\t\tlet keys = Object.keys(others);\n\n\t\tfor (let k = 0, kl = keys.length; k < kl; k++) {\n\n\t\t\tlet key   = keys[k];\n\t\t\tlet index = this.load.indexOf(key);\n\t\t\tif (index !== -1) {\n\n\t\t\t\tif (this.ready.indexOf(key) === -1) {\n\t\t\t\t\tthis.ready.push(null);\n\t\t\t\t\tthis.load.splice(index, 1);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tif (this.load.length === 0) {\n\t\t\tstash.trigger('batch', [ 'remove', this.ready ]);\n\t\t\tstash.unbind('sync', _on_batch_remove);\n\t\t}\n\n\t};\n\n\tconst _on_batch_write = function(stash, others) {\n\n\t\tlet keys = Object.keys(others);\n\n\t\tfor (let k = 0, kl = keys.length; k < kl; k++) {\n\n\t\t\tlet key   = keys[k];\n\t\t\tlet index = this.load.indexOf(key);\n\t\t\tif (index !== -1) {\n\n\t\t\t\tif (this.ready.indexOf(key) === -1) {\n\t\t\t\t\tthis.ready.push(others[key]);\n\t\t\t\t\tthis.load.splice(index, 1);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tif (this.load.length === 0) {\n\t\t\tstash.trigger('batch', [ 'write', this.ready ]);\n\t\t\tstash.unbind('sync', _on_batch_write);\n\t\t}\n\n\t};\n\n\tconst _read_stash = function(silent) {\n\n\t\tsilent = silent === true;\n\n\n\t\tlet blob = null;\n\n\n\t\tlet type = this.type;\n\t\tif (type === Composite.TYPE.persistent) {\n\n\t\t\tblob = _PERSISTENT.read();\n\n\t\t} else if (type === Composite.TYPE.temporary) {\n\n\t\t\tblob = _TEMPORARY.read();\n\n\t\t}\n\n\n\t\tif (blob !== null) {\n\n\t\t\tif (Object.keys(this.__assets).length !== Object.keys(blob).length) {\n\n\t\t\t\tthis.__assets = {};\n\n\t\t\t\tfor (let id in blob) {\n\t\t\t\t\tthis.__assets[id] = blob[id];\n\t\t\t\t}\n\n\n\t\t\t\tthis.trigger('sync', [ this.__assets ]);\n\n\t\t\t}\n\n\n\t\t\treturn true;\n\n\t\t}\n\n\n\t\treturn false;\n\n\t};\n\n\tconst _write_stash = function(silent) {\n\n\t\tsilent = silent === true;\n\n\n\t\tlet operations = this.__operations;\n\t\tlet filtered   = {};\n\n\t\tif (operations.length !== 0) {\n\n\t\t\twhile (operations.length > 0) {\n\n\t\t\t\tlet operation = operations.shift();\n\t\t\t\tif (operation.type === 'update') {\n\n\t\t\t\t\tfiltered[operation.id] = operation.asset;\n\n\t\t\t\t\tif (this.__assets[operation.id] !== operation.asset) {\n\t\t\t\t\t\tthis.__assets[operation.id] = operation.asset;\n\t\t\t\t\t}\n\n\t\t\t\t} else if (operation.type === 'remove') {\n\n\t\t\t\t\tfiltered[operation.id] = null;\n\n\t\t\t\t\tif (this.__assets[operation.id] !== null) {\n\t\t\t\t\t\tthis.__assets[operation.id] = null;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tlet type = this.type;\n\t\t\tif (type === Composite.TYPE.persistent) {\n\n\t\t\t\tfor (let id in filtered) {\n\t\t\t\t\t_PERSISTENT.write(id, filtered[id]);\n\t\t\t\t}\n\n\t\t\t} else if (type === Composite.TYPE.temporary) {\n\n\t\t\t\tfor (let id in filtered) {\n\t\t\t\t\t_PERSISTENT.write(id, filtered[id]);\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (silent === false) {\n\t\t\t\tthis.trigger('sync', [ this.__assets ]);\n\t\t\t}\n\n\n\t\t\treturn true;\n\n\t\t}\n\n\n\t\treturn false;\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Composite = function(data) {\n\n\t\tlet settings = Object.assign({}, data);\n\n\n\t\tthis.id   = 'lychee-Stash-' + _id++;\n\t\tthis.type = Composite.TYPE.persistent;\n\n\n\t\tthis.__assets     = {};\n\t\tthis.__operations = [];\n\n\n\t\tthis.setId(settings.id);\n\t\tthis.setType(settings.type);\n\n\n\t\t_Emitter.call(this);\n\n\n\n\t\t/*\n\t\t * INITIALIZATION\n\t\t */\n\n\t\t_read_stash.call(this);\n\n\n\t\tsettings = null;\n\n\t};\n\n\n\tComposite.TYPE = {\n\t\tpersistent: 0,\n\t\ttemporary:  1\n\t};\n\n\n\tComposite.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\tsync: function(silent) {\n\n\t\t\tsilent = silent === true;\n\n\n\t\t\tlet result = false;\n\n\n\t\t\tif (Object.keys(this.__assets).length > 0) {\n\n\t\t\t\tthis.__operations.push({\n\t\t\t\t\ttype: 'sync'\n\t\t\t\t});\n\n\t\t\t}\n\n\n\t\t\tif (this.__operations.length > 0) {\n\t\t\t\tresult = _write_stash.call(this, silent);\n\t\t\t} else {\n\t\t\t\tresult = _read_stash.call(this, silent);\n\t\t\t}\n\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\tdeserialize: function(blob) {\n\n\t\t\tif (blob.assets instanceof Object) {\n\n\t\t\t\tthis.__assets = {};\n\n\t\t\t\tfor (let id in blob.assets) {\n\t\t\t\t\tthis.__assets[id] = lychee.deserialize(blob.assets[id]);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tserialize: function() {\n\n\t\t\tlet data = _Emitter.prototype.serialize.call(this);\n\t\t\tdata['constructor'] = 'lychee.Stash';\n\n\t\t\tlet settings = {};\n\t\t\tlet blob     = (data['blob'] || {});\n\n\n\t\t\tif (this.id.startsWith('lychee-Stash-') === false) settings.id   = this.id;\n\t\t\tif (this.type !== Composite.TYPE.persistent)       settings.type = this.type;\n\n\n\t\t\tif (Object.keys(this.__assets).length > 0) {\n\n\t\t\t\tblob.assets = {};\n\n\t\t\t\tfor (let id in this.__assets) {\n\t\t\t\t\tblob.assets[id] = lychee.serialize(this.__assets[id]);\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tdata['arguments'][0] = settings;\n\t\t\tdata['blob']         = Object.keys(blob).length > 0 ? blob : null;\n\n\n\t\t\treturn data;\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CUSTOM API\n\t\t */\n\n\t\tbatch: function(action, ids, assets) {\n\n\t\t\taction = typeof action === 'string' ? action : null;\n\t\t\tids    = ids instanceof Array       ? ids    : null;\n\t\t\tassets = assets instanceof Array    ? assets : null;\n\n\n\t\t\tif (action !== null) {\n\n\t\t\t\tlet cache  = {\n\t\t\t\t\tload:  [].slice.call(ids),\n\t\t\t\t\tready: []\n\t\t\t\t};\n\n\n\t\t\t\tlet result = true;\n\t\t\t\tlet that   = this;\n\n\t\t\t\tif (action === 'read') {\n\n\t\t\t\t\tfor (let i = 0, il = ids.length; i < il; i++) {\n\n\t\t\t\t\t\tlet asset = this.read(ids[i]);\n\t\t\t\t\t\tif (asset !== null) {\n\n\t\t\t\t\t\t\tasset.onload = function(result) {\n\n\t\t\t\t\t\t\t\tlet index = cache.load.indexOf(this.url);\n\t\t\t\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\t\t\t\tcache.ready.push(this);\n\t\t\t\t\t\t\t\t\tcache.load.splice(index, 1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (cache.load.length === 0) {\n\t\t\t\t\t\t\t\t\tthat.trigger('batch', [ 'read', cache.ready ]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tasset.load();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tresult = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn result;\n\n\t\t\t\t} else if (action === 'remove') {\n\n\t\t\t\t\tthis.bind('#sync', _on_batch_remove, cache);\n\n\t\t\t\t\tfor (let i = 0, il = ids.length; i < il; i++) {\n\n\t\t\t\t\t\tif (this.remove(ids[i]) === false) {\n\t\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (result === false) {\n\t\t\t\t\t\tthis.unbind('sync', _on_batch_remove);\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn result;\n\n\t\t\t\t} else if (action === 'write' && ids.length === assets.length) {\n\n\t\t\t\t\tthis.bind('#sync', _on_batch_write, cache);\n\n\t\t\t\t\tfor (let i = 0, il = ids.length; i < il; i++) {\n\n\t\t\t\t\t\tif (this.write(ids[i], assets[i]) === false) {\n\t\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (result === false) {\n\t\t\t\t\t\tthis.unbind('sync', _on_batch_write);\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn result;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tread: function(id) {\n\n\t\t\tid = typeof id === 'string' ? id : null;\n\n\n\t\t\tif (id !== null) {\n\n\t\t\t\tlet asset = new lychee.Asset(id, null, true);\n\t\t\t\tif (asset !== null) {\n\n\t\t\t\t\tthis.__assets[id] = asset;\n\n\t\t\t\t\treturn asset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tremove: function(id) {\n\n\t\t\tid = typeof id === 'string' ? id : null;\n\n\n\t\t\tif (id !== null) {\n\n\t\t\t\tthis.__operations.push({\n\t\t\t\t\ttype: 'remove',\n\t\t\t\t\tid:   id\n\t\t\t\t});\n\n\n\t\t\t\t_write_stash.call(this);\n\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\twrite: function(id, asset) {\n\n\t\t\tid    = typeof id === 'string'          ? id    : null;\n\t\t\tasset = _validate_asset(asset) === true ? asset : null;\n\n\n\t\t\tif (id !== null && asset !== null) {\n\n\t\t\t\tthis.__operations.push({\n\t\t\t\t\ttype:  'update',\n\t\t\t\t\tid:    id,\n\t\t\t\t\tasset: asset\n\t\t\t\t});\n\n\n\t\t\t\t_write_stash.call(this);\n\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tsetId: function(id) {\n\n\t\t\tid = typeof id === 'string' ? id : null;\n\n\n\t\t\tif (id !== null) {\n\n\t\t\t\tthis.id = id;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tsetType: function(type) {\n\n\t\t\ttype = lychee.enumof(Composite.TYPE, type) ? type : null;\n\n\n\t\t\tif (type !== null) {\n\n\t\t\t\tthis.type = type;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n\n\treturn Composite;\n\n}"}},"strainer.plugin.API":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.plugin.API","url":"/libraries/strainer/source/plugin/API.js"}],"blob":{"attaches":{},"requires":["strainer.api.Callback","strainer.api.Composite","strainer.api.Core","strainer.api.Definition","strainer.api.Module","strainer.api.Specification"],"exports":"function (lychee, global, attachments) {\n\n\tconst _api = {\n\t\tCallback:      lychee.import('strainer.api.Callback'),\n\t\tComposite:     lychee.import('strainer.api.Composite'),\n\t\tCore:          lychee.import('strainer.api.Core'),\n\t\tDefinition:    lychee.import('strainer.api.Definition'),\n\t\tModule:        lychee.import('strainer.api.Module'),\n\t\tSpecification: lychee.import('strainer.api.Specification')\n\t};\n\n\n\n\t/*\n\t * FIXES\n\t */\n\n\tconst _split_chunk = function(code, search, offset) {\n\n\t\tlet index = code.indexOf(search, offset);\n\t\tif (index !== -1) {\n\n\t\t\tlet chunk0 = code.substr(0, index + search.length);\n\t\t\tlet chunk1 = code.substr(index + search.length);\n\n\t\t\treturn [ chunk0, chunk1 ];\n\n\t\t}\n\n\n\t\treturn null;\n\n\t};\n\n\tconst _TAB_STR = new Array(128).fill('\\t').join('');\n\tconst _FIXES   = {\n\n\t\t'no-define': function(err, report, code) {\n\n\t\t\tlet url = err.url || null;\n\t\t\tif (url !== null) {\n\n\t\t\t\tlet filename = url.split('/').pop();\n\t\t\t\tif (/^(bootstrap|features|harvester)\\.js$/g.test(filename)) {\n\t\t\t\t\treturn code;\n\t\t\t\t}\n\n\n\t\t\t\tlet tmp = url.split('/');\n\t\t\t\tif (tmp.length > 3) {\n\n\t\t\t\t\tlet type   = tmp[1];\n\t\t\t\t\tlet folder = tmp[3];\n\n\t\t\t\t\tif (folder === 'source') {\n\n\t\t\t\t\t\tlet is_platform = tmp[4] === 'platform';\n\t\t\t\t\t\tif (is_platform === true) {\n\n\t\t\t\t\t\t\tlet platform = tmp[5];\n\t\t\t\t\t\t\tlet name     = [ type === 'libraries' ? tmp[2] : 'app' ].concat(tmp.slice(6));\n\n\t\t\t\t\t\t\tlet check = name[name.length - 1].indexOf('.');\n\t\t\t\t\t\t\tif (check !== -1) {\n\t\t\t\t\t\t\t\tname[name.length - 1] = name[name.length - 1].substr(0, check);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn '\\nlychee.define(\\'' + name.join('.') + '\\').tags({\\n\\t\\'platform\\': \\'' + platform + '\\'\\n});\\n' + code.trim() + '\\n';\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tlet name  = [ type === 'libraries' ? tmp[2] : 'app' ].concat(tmp.slice(4));\n\t\t\t\t\t\t\tlet check = name[name.length - 1].indexOf('.');\n\t\t\t\t\t\t\tif (check !== -1) {\n\t\t\t\t\t\t\t\tname[name.length - 1] = name[name.length - 1].substr(0, check);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn '\\nlychee.define(\\'' + name.join('.') + '\\');\\n' + code.trim() + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// XXX: Ignore this error in other folders\n\t\t\t\t\t\treturn code;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'no-specify': function(err, report, code) {\n\n\t\t\tlet url = err.url || null;\n\t\t\tif (url !== null) {\n\n\t\t\t\tlet tmp = url.split('/');\n\t\t\t\tif (tmp.length > 3) {\n\n\t\t\t\t\tlet type   = tmp[1];\n\t\t\t\t\tlet folder = tmp[3];\n\n\t\t\t\t\tif (folder === 'review') {\n\n\t\t\t\t\t\tlet name  = [ type === 'libraries' ? tmp[2] : 'app' ].concat(tmp.slice(4));\n\t\t\t\t\t\tlet check = name[name.length - 1].indexOf('.');\n\t\t\t\t\t\tif (check !== -1) {\n\t\t\t\t\t\t\tname[name.length - 1] = name[name.length - 1].substr(0, check);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn '\\nlychee.specify(\\'' + name.join('.') + '\\');\\n' + code.trim() + '\\n';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// XXX: Ignore this error in other folders\n\t\t\t\t\t\treturn code;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'no-exports': function(err, report, code) {\n\n\t\t\tlet url = err.url;\n\t\t\tif (url !== null) {\n\n\t\t\t\tlet filename = url.split('/').pop();\n\t\t\t\tif (/^(bootstrap|features|harvester)\\.js$/g.test(filename)) {\n\t\t\t\t\treturn code;\n\t\t\t\t}\n\n\n\t\t\t\tlet tmp = err.url.split('/');\n\t\t\t\tif (tmp.length > 3) {\n\n\t\t\t\t\tlet type   = tmp[1];\n\t\t\t\t\tlet folder = tmp[3];\n\n\t\t\t\t\tif (folder === 'source') {\n\n\t\t\t\t\t\tlet i1 = code.indexOf('lychee.define(');\n\t\t\t\t\t\tlet i2 = code.indexOf('tags({');\n\t\t\t\t\t\tlet i3 = code.indexOf('attaches({');\n\t\t\t\t\t\tlet i4 = code.indexOf('requires([');\n\t\t\t\t\t\tlet i5 = code.indexOf('includes([');\n\t\t\t\t\t\tlet i6 = code.indexOf('supports(function(lychee, global) {');\n\t\t\t\t\t\tlet i7 = code.indexOf('exports(function(lychee, global, attachments) {');\n\n\t\t\t\t\t\tif (i7 === -1) {\n\n\t\t\t\t\t\t\tlet chunk = null;\n\n\t\t\t\t\t\t\tif (i6 !== -1) {\n\t\t\t\t\t\t\t\tchunk = _split_chunk(code, '})', i6);\n\t\t\t\t\t\t\t} else if (i5 !== -1) {\n\t\t\t\t\t\t\t\tchunk = _split_chunk(code, '])', i5);\n\t\t\t\t\t\t\t} else if (i4 !== -1) {\n\t\t\t\t\t\t\t\tchunk = _split_chunk(code, '])', i4);\n\t\t\t\t\t\t\t} else if (i3 !== -1) {\n\t\t\t\t\t\t\t\tchunk = _split_chunk(code, '})', i3);\n\t\t\t\t\t\t\t} else if (i2 !== -1) {\n\t\t\t\t\t\t\t\tchunk = _split_chunk(code, '})', i2);\n\t\t\t\t\t\t\t} else if (i1 !== -1) {\n\t\t\t\t\t\t\t\tchunk = _split_chunk(code, ')',  i1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (chunk !== null) {\n\t\t\t\t\t\t\t\treturn chunk[0] + '.exports(function(lychee, global, attachments) {\\n\\n\\n})' + chunk[1];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (folder === 'review') {\n\n\t\t\t\t\t\tlet i1 = code.indexOf('lychee.specify(');\n\t\t\t\t\t\tlet i2 = code.indexOf('requires([');\n\t\t\t\t\t\tlet i3 = code.indexOf('exports(function(lychee, sandbox) {');\n\n\t\t\t\t\t\tif (i3 === -1) {\n\n\t\t\t\t\t\t\tlet chunk = null;\n\n\t\t\t\t\t\t\tif (i2 !== -1) {\n\t\t\t\t\t\t\t\tchunk = _split_chunk(code, '])', i2);\n\t\t\t\t\t\t\t} else if (i1 !== -1) {\n\t\t\t\t\t\t\t\tchunk = _split_chunk(code, ')',  i1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (chunk !== null) {\n\t\t\t\t\t\t\t\treturn chunk[0] + '.exports(function(lychee, sandbox) {\\n\\n\\n})' + chunk[1];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'no-requires': function(err, report, code) {\n\n\t\t\tlet name  = err.reference;\n\t\t\tlet entry = report.memory[name] || null;\n\t\t\tif (entry !== null) {\n\n\t\t\t\tlet ref = entry.value.reference;\n\t\t\t\tlet i1  = code.indexOf('requires([');\n\t\t\t\tlet i2  = code.indexOf('\\n])', i1);\n\t\t\t\tlet i3  = code.indexOf('exports(function(lychee, global, attachments) {\\n');\n\n\t\t\t\tif (i1 !== -1 && i2 !== -1 && i3 !== -1 && i1 < i3) {\n\n\t\t\t\t\tlet tmp1 = code.substr(i1 + 9, i2 - i1 - 7);\n\t\t\t\t\tif (tmp1.length > 0 && tmp1.startsWith('[') && tmp1.endsWith(']')) {\n\n\t\t\t\t\t\tlet chunk = tmp1.split('\\n');\n\t\t\t\t\t\tif (chunk.length > 2) {\n\t\t\t\t\t\t\tchunk.splice(1, 0, '\\t\\'' + ref + '\\',');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchunk.splice(1, 0, '\\t\\'' + ref + '\\'');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn code.substr(0, i1 + 9) + chunk.join('\\n') + code.substr(i2 + 2);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ti1 = code.indexOf('lychee.define(');\n\t\t\t\t\ti2 = code.indexOf(')', i1);\n\n\t\t\t\t\tif (i1 !== -1 && i2 !== -1 && i2 < i3) {\n\t\t\t\t\t\treturn code.substr(0, i2 + 1) + '.requires([\\n\\t\\'' + ref + '\\'\\n])' + code.substr(i2 + 1);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'no-includes': function(err, report, code) {\n\n\t\t\tlet name  = err.reference;\n\t\t\tlet entry = report.memory[name] || null;\n\t\t\tif (entry !== null) {\n\n\t\t\t\tlet ref = entry.value.reference;\n\t\t\t\tlet i1  = code.indexOf('includes([');\n\t\t\t\tlet i2  = code.indexOf('\\n])', i1);\n\t\t\t\tlet i3  = code.indexOf('exports(function(lychee, global, attachments) {\\n');\n\n\t\t\t\tif (i1 !== -1 && i2 !== -1 && i3 !== -1 && i1 < i3) {\n\n\t\t\t\t\tlet tmp1 = code.substr(i1 + 9, i2 - i1 - 7);\n\t\t\t\t\tif (tmp1.length > 0 && tmp1.startsWith('[') && tmp1.endsWith(']')) {\n\n\t\t\t\t\t\tlet chunk = tmp1.split('\\n');\n\t\t\t\t\t\tif (chunk.length > 2) {\n\t\t\t\t\t\t\tchunk.splice(1, 0, '\\t\\'' + ref + '\\',');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchunk.splice(1, 0, '\\t\\'' + ref + '\\'');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn code.substr(0, i1 + 9) + chunk.join('\\n') + code.substr(i2 + 2);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ti1 = code.indexOf('requires([');\n\t\t\t\t\ti2 = code.indexOf('\\n])', i1);\n\n\t\t\t\t\tif (i1 !== -1 && i2 !== -1 && i2 < i3) {\n\n\t\t\t\t\t\treturn code.substr(0, i2 + 3) + '.includes([\\n\\t\\'' + ref + '\\'\\n])' + code.substr(i2 + 3);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = code.indexOf('lychee.define(');\n\t\t\t\t\t\ti2 = code.indexOf(')', i1);\n\n\t\t\t\t\t\tif (i1 !== -1 && i2 !== -1 && i2 < i3) {\n\t\t\t\t\t\t\treturn code.substr(0, i2 + 1) + '.includes([\\n\\t\\'' + ref + '\\'\\n])' + code.substr(i2 + 1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'no-settings': function(err, report, code) {\n\n\t\t\tlet type = report.header.type;\n\t\t\tif (type === 'Composite') {\n\n\t\t\t\tlet i1 = code.indexOf('\\n\\tconst Composite =');\n\t\t\t\tlet i2 = code.indexOf('\\n\\t};', i1);\n\n\t\t\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\t\t\tlet chunk = code.substr(i1, i2 - i1 + 4).split('\\n');\n\n\t\t\t\t\tchunk.splice(2, 0, '\\n\\t\\tlet settings = Object.assign({}, data);\\n');\n\n\t\t\t\t\treturn code.substr(0, i1) + chunk.join('\\n') + code.substr(i2 + 4);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'no-garbage': function(err, report, code) {\n\n\t\t\tlet type = report.header.type;\n\t\t\tif (type === 'Composite') {\n\n\t\t\t\tlet i1 = code.indexOf('\\n\\tconst Composite =');\n\t\t\t\tlet i2 = code.indexOf('\\n\\t};', i1);\n\n\t\t\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\t\t\tlet chunk = code.substr(i1, i2 - i1 + 4).split('\\n');\n\n\t\t\t\t\tchunk.splice(chunk.length - 1, 0, '\\n\\t\\tsettings = null;\\n');\n\n\t\t\t\t\treturn code.substr(0, i1) + chunk.join('\\n') + code.substr(i2 + 4);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'no-constructor-call': function(err, report, code) {\n\n\t\t\tlet type = report.header.type;\n\t\t\tif (type === 'Composite') {\n\n\t\t\t\tlet name  = err.reference;\n\t\t\t\tlet entry = report.memory[name] || null;\n\t\t\t\tif (entry !== null) {\n\n\t\t\t\t\tlet i1 = code.indexOf('\\n\\tconst Composite =');\n\t\t\t\t\tlet i2 = code.indexOf('\\n\\t};', i1);\n\n\t\t\t\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\t\t\t\tlet chunk = code.substr(i1, i2 - i1 + 4).split('\\n');\n\t\t\t\t\t\tlet i3    = chunk.findIndex(function(line) {\n\t\t\t\t\t\t\treturn line.includes('settings = null');\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (i3 !== -1) {\n\t\t\t\t\t\t\tchunk.splice(i3, 0, '\\t\\t' + name + '.call(this, settings);\\n');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchunk.splice(chunk.length - 1, 0, '\\n\\t\\t' + name + '.call(this, settings);\\n');\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\treturn code.substr(0, i1) + chunk.join('\\n') + code.substr(i2 + 4);\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'no-deserialize': function(err, report, code) {\n\n\t\t\tlet type  = report.header.type;\n\t\t\tlet chunk = [];\n\n\t\t\tlet ids = report.header.includes;\n\t\t\tif (type === 'Composite' && ids.length > 0) {\n\n\t\t\t\tids.map(function(id) {\n\n\t\t\t\t\tlet reference = null;\n\n\t\t\t\t\tfor (let name in report.memory) {\n\n\t\t\t\t\t\tlet entry = report.memory[name];\n\t\t\t\t\t\tlet value = entry.value || null;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tvalue !== null\n\t\t\t\t\t\t\t&& value instanceof Object\n\t\t\t\t\t\t\t&& value.reference === id\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treference = name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn reference;\n\n\t\t\t\t}).filter(function(reference) {\n\t\t\t\t\treturn reference !== null;\n\t\t\t\t}).forEach(function(reference, r) {\n\t\t\t\t\tchunk.push('' + reference + '.prototype.deserialize.call(this, blob);');\n\t\t\t\t});\n\n\t\t\t}\n\n\n\t\t\tlet inject = '\\n\\t\\t// deserialize: function(blob) {},\\n';\n\t\t\tif (chunk.length > 0) {\n\n\t\t\t\tinject = '\\n\\t\\tdeserialize: function(blob) {\\n\\n' + chunk.map(function(ch) {\n\t\t\t\t\tif (ch !== '') {\n\t\t\t\t\t\treturn ch.padStart(ch.length + 3, '\\t');\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn ch;\n\t\t\t\t\t}\n\t\t\t\t}).join('\\n') + '\\n\\n\\t\\t},\\n';\n\n\t\t\t}\n\n\n\t\t\tif (type === 'Composite') {\n\n\t\t\t\tlet i1 = code.indexOf('\\n\\tComposite.prototype = {\\n');\n\t\t\t\tlet i2 = code.indexOf('\\n\\t};', i1);\n\t\t\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\t\t\treturn code.substr(0, i1 + 26) + inject + code.substr(i1 + 26);\n\t\t\t\t}\n\n\t\t\t} else if (type === 'Module') {\n\n\t\t\t\tlet i1 = code.indexOf('\\n\\tconst Module = {\\n');\n\t\t\t\tlet i2 = code.indexOf('\\n\\t};', i1);\n\t\t\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\t\t\treturn code.substr(0, i1 + 26) + inject + code.substr(i1 + 26);\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'no-serialize': function(err, report, code) {\n\n\t\t\tlet type        = report.header.type;\n\t\t\tlet chunk       = [];\n\t\t\tlet identifier  = report.header.identifier;\n\t\t\tlet has_methods = Object.keys(report.result.methods).length > 0;\n\n\t\t\tlet ids = report.header.includes;\n\t\t\tif (type === 'Composite' && ids.length > 0) {\n\n\t\t\t\tids.map(function(id) {\n\n\t\t\t\t\tlet reference = null;\n\n\t\t\t\t\tfor (let name in report.memory) {\n\n\t\t\t\t\t\tlet entry = report.memory[name];\n\t\t\t\t\t\tlet value = entry.value || null;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tvalue !== null\n\t\t\t\t\t\t\t&& value instanceof Object\n\t\t\t\t\t\t\t&& value.reference === id\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treference = name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn reference;\n\n\t\t\t\t}).filter(function(reference) {\n\t\t\t\t\treturn reference !== null;\n\t\t\t\t}).forEach(function(reference, r) {\n\n\t\t\t\t\tif (r === 0) {\n\t\t\t\t\t\tchunk.push('let data = ' + reference + '.prototype.serialize.call(this);');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push('data = Object.assign(data, ' + reference + '.prototype.serialize.call(this);');\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t\tchunk.push('data[\\'constructor\\'] = \\'' + identifier + '\\';');\n\t\t\t\tchunk.push('');\n\t\t\t\tchunk.push('');\n\t\t\t\tchunk.push('return data;');\n\n\t\t\t} else if (type === 'Composite') {\n\n\t\t\t\tchunk.push('return {');\n\t\t\t\tchunk.push('\\t\\'constructor\\': \\'' + identifier + '\\',');\n\t\t\t\tchunk.push('\\t\\'arguments\\': []');\n\t\t\t\tchunk.push('};');\n\n\t\t\t} else if (type === 'Module') {\n\n\t\t\t\tchunk.push('return {');\n\t\t\t\tchunk.push('\\t\\'reference\\': \\'' + identifier + '\\',');\n\t\t\t\tchunk.push('\\t\\'arguments\\': []');\n\t\t\t\tchunk.push('};');\n\n\t\t\t}\n\n\n\t\t\tlet inject = '\\n\\t\\tserialize: function() {\\n\\n' + chunk.map(function(ch) {\n\t\t\t\tif (ch !== '') {\n\t\t\t\t\treturn ch.padStart(ch.length + 3, '\\t');\n\t\t\t\t} else {\n\t\t\t\t\treturn ch;\n\t\t\t\t}\n\t\t\t}).join('\\n') + '\\n\\n\\t\\t}';\n\n\t\t\tif (has_methods === true) {\n\t\t\t\tinject += ',\\n\\n';\n\t\t\t} else {\n\t\t\t\tinject += '\\n\\n';\n\t\t\t}\n\n\t\t\tif (type === 'Composite') {\n\n\t\t\t\tlet i1 = code.indexOf('\\n\\tComposite.prototype = {\\n');\n\t\t\t\tlet i2 = code.indexOf('\\n\\t\\tdeserialize: function(blob) {\\n');\n\t\t\t\tlet i3 = code.indexOf('\\n\\t\\t// deserialize: function(blob) {},\\n');\n\t\t\t\tlet i4 = code.indexOf('\\n\\t};', i1);\n\t\t\t\tif (i1 !== -1 && i4 !== -1) {\n\n\t\t\t\t\tif (i2 !== -1) {\n\n\t\t\t\t\t\tlet i20 = code.indexOf('\\n\\t\\t},\\n', i2);\n\t\t\t\t\t\tlet i21 = code.indexOf('\\n\\t\\t}\\n', i2);\n\n\t\t\t\t\t\tif (i20 !== -1) {\n\t\t\t\t\t\t\treturn code.substr(0, i20 + 6) + inject + code.substr(i20 + 6);\n\t\t\t\t\t\t} else if (i21 !== -1) {\n\t\t\t\t\t\t\treturn code.substr(0, i21 + 4) + ',\\n' + inject + code.substr(i21 + 5);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (i3 !== -1) {\n\t\t\t\t\t\treturn code.substr(0, i3 + 38) + inject + code.substr(i3 + 38);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn code.substr(0, i1 + 26) + inject + code.substr(i1 + 26);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if (type === 'Module') {\n\n\t\t\t\tlet i1 = code.indexOf('\\n\\tconst Module = {\\n');\n\t\t\t\tlet i2 = code.indexOf('\\n\\t};', i1);\n\t\t\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\t\t\treturn code.substr(0, i1 + 26) + inject + code.substr(i1 + 26);\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'unguessable-return-value': function(err, report, code) {\n\n\t\t\tlet method = report.result.methods[err.reference] || null;\n\t\t\tif (method !== null) {\n\n\t\t\t\tlet has_already = method.values.find(function(val) {\n\t\t\t\t\treturn val.type !== 'undefined';\n\t\t\t\t});\n\n\t\t\t\tif (has_already !== undefined) {\n\t\t\t\t\treturn code;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t'unguessable-property-value': function(err, report, code) {\n\n\t\t\tlet property = report.result.properties[err.reference] || null;\n\t\t\tif (property !== null) {\n\n\t\t\t\tif (property.value.type !== 'undefined') {\n\t\t\t\t\treturn code;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _validate_asset = function(asset) {\n\n\t\tif (asset instanceof Object && typeof asset.serialize === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Module = {\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'strainer.plugin.API',\n\t\t\t\t'arguments': []\n\t\t\t};\n\n\t\t},\n\n\t\tcheck: function(asset) {\n\n\t\t\tasset = _validate_asset(asset) === true ? asset : null;\n\n\n\t\t\tif (asset !== null) {\n\n\t\t\t\tlet header = null;\n\t\t\t\tlet report = null;\n\t\t\t\tlet api    = null;\n\t\t\t\tlet stream = asset.buffer.toString('utf8');\n\t\t\t\tlet first  = stream.trim().split('\\n')[0];\n\n\n\t\t\t\tlet is_core          = asset.url.startsWith('/libraries/lychee/source/core') && first.endsWith('(function(global) {');\n\t\t\t\tlet is_definition    = first.startsWith('lychee.define(');\n\t\t\t\tlet is_specification = first.startsWith('lychee.specify(');\n\t\t\t\tlet is_callback      = stream.lastIndexOf('return Callback;')  > 0;\n\t\t\t\tlet is_composite     = stream.lastIndexOf('return Composite;') > 0;\n\t\t\t\tlet is_module        = stream.lastIndexOf('return Module;')    > 0;\n\n\n\t\t\t\t// XXX: Well, yeah. Above algorithm will crash itself\n\t\t\t\tif (asset.url === '/libraries/strainer/source/plugin/API.js') {\n\t\t\t\t\tis_callback  = false;\n\t\t\t\t\tis_composite = false;\n\t\t\t\t\tis_module    = true;\n\t\t\t\t}\n\n\n\t\t\t\tif (is_definition === true) {\n\t\t\t\t\theader = _api['Definition'].check(asset);\n\t\t\t\t} else if (is_specification === true) {\n\t\t\t\t\theader = _api['Specification'].check(asset);\n\t\t\t\t} else if (is_core === true) {\n\t\t\t\t\theader = _api['Core'].check(asset);\n\t\t\t\t} else {\n\n\t\t\t\t\tif (asset.url.includes('/review/')) {\n\t\t\t\t\t\theader = _api['Specification'].check(asset);\n\t\t\t\t\t} else if (asset.url.includes('/source/')) {\n\t\t\t\t\t\theader = _api['Definition'].check(asset);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// XXX: autofix assumes lychee.Definition syntax\n\t\t\t\t\t\theader = _api['Definition'].check(asset);\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (is_callback === true) {\n\t\t\t\t\tapi = _api['Callback'] || null;\n\t\t\t\t} else if (is_composite === true) {\n\t\t\t\t\tapi = _api['Composite'] || null;\n\t\t\t\t} else if (is_module === true) {\n\t\t\t\t\tapi = _api['Module'] || null;\n\t\t\t\t}\n\n\n\t\t\t\tif (api !== null) {\n\n\t\t\t\t\treport = api.check(asset, header.result);\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// XXX: autofix assumes lychee.Definition\n\t\t\t\t\treport = {\n\t\t\t\t\t\terrors: [],\n\t\t\t\t\t\tmemory: {},\n\t\t\t\t\t\tresult: {\n\t\t\t\t\t\t\tconstructor: {\n\t\t\t\t\t\t\t\tbody:       null,\n\t\t\t\t\t\t\t\thash:       null,\n\t\t\t\t\t\t\t\tparameters: []\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsettings:    {},\n\t\t\t\t\t\t\tproperties:  {},\n\t\t\t\t\t\t\tenums:       {},\n\t\t\t\t\t\t\tevents:      {},\n\t\t\t\t\t\t\tmethods:     {}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\n\t\t\t\tif (header !== null && report !== null) {\n\n\t\t\t\t\tif (header.errors.length > 0) {\n\n\t\t\t\t\t\tlet errors = [];\n\n\t\t\t\t\t\terrors.push.apply(errors, header.errors);\n\t\t\t\t\t\terrors.push.apply(errors, report.errors);\n\n\t\t\t\t\t\treport.errors = errors;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treport.errors.forEach(function(err) {\n\n\t\t\t\t\t\tif (err.url === null) {\n\t\t\t\t\t\t\terr.url = asset.url;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\n\t\t\t\t\tif (is_callback === true) {\n\t\t\t\t\t\theader.result.type = 'Callback';\n\t\t\t\t\t} else if (is_composite === true) {\n\t\t\t\t\t\theader.result.type = 'Composite';\n\t\t\t\t\t} else if (is_module === true) {\n\t\t\t\t\t\theader.result.type = 'Module';\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\theader: header.result,\n\t\t\t\t\t\tmemory: report.memory,\n\t\t\t\t\t\terrors: report.errors,\n\t\t\t\t\t\tresult: report.result\n\t\t\t\t\t};\n\n\t\t\t\t} else if (report !== null) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\theader: null,\n\t\t\t\t\t\tmemory: report.memory,\n\t\t\t\t\t\terrors: report.errors,\n\t\t\t\t\t\tresult: report.result\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tfix: function(asset, report) {\n\n\t\t\tasset  = _validate_asset(asset) === true ? asset  : null;\n\t\t\treport = report instanceof Object        ? report : null;\n\n\n\t\t\tlet filtered = [];\n\n\t\t\tif (asset !== null && report !== null) {\n\n\t\t\t\tlet code     = asset.buffer.toString('utf8');\n\t\t\t\tlet modified = false;\n\n\n\t\t\t\treport.errors.forEach(function(err) {\n\n\t\t\t\t\tlet rule = err.rule;\n\n\t\t\t\t\tlet fix = _FIXES[rule] || null;\n\t\t\t\t\tif (fix !== null) {\n\n\t\t\t\t\t\tlet result = fix(err, report, code);\n\t\t\t\t\t\tif (result !== null) {\n\t\t\t\t\t\t\tcode     = result;\n\t\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfiltered.push(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfiltered.push(err);\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\n\t\t\t\tif (modified === true) {\n\t\t\t\t\tasset.buffer    = new Buffer(code, 'utf8');\n\t\t\t\t\tasset._MODIFIED = true;\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn filtered;\n\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"strainer.plugin.ESLINT":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.plugin.ESLINT","url":"/libraries/strainer/source/platform/html/plugin/ESLINT.js"}],"blob":{"attaches":{},"tags":{"platform":"html"},"supports":"function (lychee, global) {\n\n\treturn true;\n\n}","exports":"function (lychee, global, attachments) {\n\n\tconst _auto_fix = function(line, err) {\n\n\t\tif (err.fix) {\n\t\t\treturn line.substr(0, err.fix.range[0]) + err.fix.text + line.substr(err.fix.range[1]);\n\t\t}\n\n\t\treturn line;\n\n\t};\n\n\tconst _TAB_STR = new Array(128).fill('\\t').join('');\n\tconst _FIXES   = {\n\n\t\t/*\n\t\t * AUTO FIXES\n\t\t */\n\n\t\t'array-bracket-spacing': _auto_fix,\n\t\t'comma-dangle':          _auto_fix,\n\t\t'comma-spacing':         _auto_fix,\n\t\t'keyword-spacing':       _auto_fix,\n\t\t'no-trailing-spaces':    _auto_fix,\n\t\t'no-var':                _auto_fix,\n\t\t'object-curly-spacing':  _auto_fix,\n\t\t'semi':                  _auto_fix,\n\t\t'semi-spacing':          _auto_fix,\n\t\t'space-before-blocks':   _auto_fix,\n\t\t'space-in-parens':       _auto_fix,\n\t\t'space-infix-ops':       _auto_fix,\n\t\t'space-unary-ops':       _auto_fix,\n\n\n\t\t/*\n\t\t * MANUAL FIXES\n\t\t */\n\n\t\t'brace-style': function(line, err) {\n\n\t\t\tif (err.fix) {\n\n\t\t\t\tlet prefix = line.substr(0, err.fix.range[0]);\n\t\t\t\tlet suffix = line.substr(err.fix.range[1]);\n\n\n\t\t\t\tlet tmp = prefix.split('\\n').pop().split('');\n\t\t\t\tlet tl  = tmp.indexOf(tmp.find(function(val) {\n\t\t\t\t\treturn val !== '\\t';\n\t\t\t\t}));\n\n\n\t\t\t\tif (err.message.startsWith('Statement inside of curly braces')) {\n\n\t\t\t\t\ttl += 1;\n\n\t\t\t\t} else if (err.message.startsWith('Closing curly brace')) {\n\n\t\t\t\t\ttl -= 1;\n\n\t\t\t\t}\n\n\n\t\t\t\tlet tabs = _TAB_STR.substr(0, tl);\n\t\t\t\tif (tabs.length > 0) {\n\t\t\t\t\treturn prefix.trimRight() + err.fix.text + tabs + suffix.trimLeft();\n\t\t\t\t}\n\n\n\t\t\t\treturn prefix + err.fix.text + suffix;\n\n\t\t\t}\n\n\n\t\t\treturn line;\n\n\t\t},\n\n\t\t'indent': function(line, err, code, c) {\n\n\t\t\tif (err.fix) {\n\n\t\t\t\t// XXX: The indent plugin in eslint is broken\n\t\t\t\t// and gives false err.fix when mixed tabs\n\t\t\t\t// and whitespaces are in place.\n\n\t\t\t\tlet prev = null;\n\n\t\t\t\tfor (let p = c - 1; p >= 0; p--) {\n\n\t\t\t\t\tlet tmp = code[p];\n\t\t\t\t\tif (tmp.trim() !== '') {\n\t\t\t\t\t\tprev = tmp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tlet text = err.fix.text;\n\n\t\t\t\tif (prev !== null && prev.startsWith('\\t')) {\n\n\t\t\t\t\tlet tmp = prev.split('\\n').pop().split('');\n\t\t\t\t\tlet tl  = tmp.indexOf(tmp.find(function(val) {\n\t\t\t\t\t\treturn val !== '\\t';\n\t\t\t\t\t}));\n\n\t\t\t\t\tif (prev.endsWith('{')) {\n\t\t\t\t\t\ttl += 1;\n\t\t\t\t\t} else if (line.endsWith('}') || line.endsWith('});')) {\n\t\t\t\t\t\ttl -= 1;\n\t\t\t\t\t}\n\n\t\t\t\t\ttext = _TAB_STR.substr(0, tl);\n\n\t\t\t\t}\n\n\n\t\t\t\treturn line.substr(0, err.fix.range[0]) + text + line.substr(err.fix.range[1]);\n\n\t\t\t}\n\n\n\t\t\treturn line;\n\n\t\t},\n\n\t\t'no-mixed-spaces-and-tabs': function(line, err, code, c) {\n\n\t\t\tlet prev = null;\n\n\t\t\tfor (let p = c - 1; p >= 0; p--) {\n\n\t\t\t\tlet tmp = code[p];\n\t\t\t\tif (tmp.trim() !== '') {\n\t\t\t\t\tprev = tmp;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tlet suffix = line.trimLeft();\n\t\t\tlet t      = line.indexOf(suffix);\n\t\t\tlet text   = line.substr(0, t).split(' ').join('\\t');\n\n\n\t\t\tif (prev !== null && prev.startsWith('\\t')) {\n\n\t\t\t\tlet tmp = prev.split('\\n').pop().split('');\n\t\t\t\tlet tl  = tmp.indexOf(tmp.find(function(val) {\n\t\t\t\t\treturn val !== '\\t';\n\t\t\t\t}));\n\n\t\t\t\tif (prev.endsWith('{')) {\n\t\t\t\t\ttl += 1;\n\t\t\t\t} else if (line.endsWith('}') || line.endsWith('});')) {\n\t\t\t\t\ttl -= 1;\n\t\t\t\t}\n\n\t\t\t\ttext = _TAB_STR.substr(0, tl);\n\n\t\t\t}\n\n\n\t\t\treturn text + suffix;\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _validate_asset = function(asset) {\n\n\t\tif (asset instanceof Object && typeof asset.serialize === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Module = {\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'strainer.plugin.ESLINT',\n\t\t\t\t'arguments': []\n\t\t\t};\n\n\t\t},\n\n\t\tcheck: function(asset) {\n\n\t\t\tasset = _validate_asset(asset) === true ? asset : null;\n\n\n\t\t\tlet errors = [];\n\n\t\t\tif (asset !== null) {\n\n\t\t\t\t// XXX: No implementation for HTML platform possible\n\n\t\t\t}\n\n\t\t\treturn errors;\n\n\t\t},\n\n\t\tfix: function(asset, report) {\n\n\t\t\treport = report instanceof Array ? report : null;\n\n\n\t\t\tlet filtered = [];\n\n\t\t\tif (report !== null) {\n\n\t\t\t\tlet code     = asset.buffer.toString('utf8').split('\\n');\n\t\t\t\tlet modified = false;\n\t\t\t\tlet range    = [ 0 ];\n\n\t\t\t\tcode.forEach(function(chunk, c) {\n\t\t\t\t\trange[c + 1] = range[c] + chunk.length + 1;\n\t\t\t\t});\n\n\n\t\t\t\tlet prev_l    = -1;\n\t\t\t\tlet prev_diff = 0;\n\n\t\t\t\treport.forEach(function(err) {\n\n\t\t\t\t\tlet line = err.line;\n\t\t\t\t\tlet rule = err.ruleId;\n\t\t\t\t\tlet l    = line - 1;\n\n\n\t\t\t\t\tlet fix = _FIXES[rule] || null;\n\t\t\t\t\tif (fix !== null) {\n\n\t\t\t\t\t\tlet tmp = err.fix || null;\n\t\t\t\t\t\tif (tmp !== null && tmp.range instanceof Array) {\n\n\t\t\t\t\t\t\tlet diff = 0;\n\t\t\t\t\t\t\tif (l === prev_l) {\n\t\t\t\t\t\t\t\tdiff = prev_diff;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttmp.range = tmp.range.map(function(value) {\n\t\t\t\t\t\t\t\treturn value - range[line - 1] + diff;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet tmp1 = code[l];\n\t\t\t\t\t\tlet tmp2 = fix(tmp1, err, code, l);\n\n\t\t\t\t\t\tif (l === prev_l) {\n\t\t\t\t\t\t\tprev_diff += tmp2.length - tmp1.length;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprev_diff = tmp2.length - tmp1.length;\n\t\t\t\t\t\t\tprev_l    = l;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (tmp1 !== tmp2) {\n\t\t\t\t\t\t\tcode[l]  = tmp2;\n\t\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfiltered.push(err);\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\n\t\t\t\tif (modified === true) {\n\t\t\t\t\tasset.buffer    = new Buffer(code.join('\\n'), 'utf8');\n\t\t\t\t\tasset._MODIFIED = true;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn filtered;\n\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"strainer.api.PARSER":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.api.PARSER","url":"/libraries/strainer/source/api/PARSER.js"}],"blob":{"attaches":{"json":{"constructor":"Config","arguments":["/libraries/strainer/source/api/PARSER.json"],"blob":{"buffer":"data:application/json;base64,"}}},"requires":["lychee.crypto.MURMUR"],"exports":"function (lychee, global, attachments) {\n\n\tconst _DICTIONARY = attachments[\"json\"].buffer;\n\tconst _FEATURES   = lychee.FEATURES;\n\tconst _MURMUR     = lychee.import('lychee.crypto.MURMUR');\n\tconst _PLATFORMS  = lychee.PLATFORMS;\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _resolve_reference = function(identifier) {\n\n\t\tlet pointer = this;\n\n\t\tlet ns = identifier.split('.');\n\t\tfor (let n = 0, l = ns.length; n < l; n++) {\n\n\t\t\tlet name = ns[n];\n\t\t\tif (name.includes('(') && name.includes(')')) {\n\n\t\t\t\tlet args = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tlet str = name.substr(name.indexOf('('));\n\t\t\t\t\tstr  = str.split('\\'').join('\"');\n\t\t\t\t\targs = JSON.parse('[' + str.substr(1, str.length - 2) + ']');\n\n\t\t\t\t} catch (err) {\n\t\t\t\t\targs = null;\n\t\t\t\t}\n\n\n\t\t\t\tname = name.substr(0, name.indexOf('('));\n\n\n\t\t\t\tif (typeof pointer[name] === 'function' && args !== null) {\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpointer = pointer[name].apply(pointer, args);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tpointer = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pointer === null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpointer = null;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if (pointer[name] !== undefined) {\n\n\t\t\t\tpointer = pointer[name];\n\n\t\t\t} else {\n\n\t\t\t\tpointer = null;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn pointer;\n\n\t};\n\n\tconst _resolve_value = function(val) {\n\n\t\tlet value = {\n\t\t\tchunk: 'undefined',\n\t\t\ttype:  'undefined',\n\t\t\tvalue: val\n\t\t};\n\n\n\t\tif (val === undefined) {\n\n\t\t\tvalue.chunk = 'undefined';\n\t\t\tvalue.type  = 'undefined';\n\n\t\t} else if (val === null) {\n\n\t\t\tvalue.chunk = 'null';\n\t\t\tvalue.type  = 'null';\n\n\t\t} else if (typeof val === 'boolean') {\n\n\t\t\tvalue.chunk = (val).toString();\n\t\t\tvalue.type  = 'Boolean';\n\n\t\t} else if (typeof val === 'number') {\n\n\t\t\tvalue.chunk = (val).toString();\n\t\t\tvalue.type  = 'Number';\n\n\t\t} else if (typeof val === 'string') {\n\n\t\t\tvalue.chunk = val;\n\t\t\tvalue.type  = 'String';\n\n\t\t} else if (typeof val === 'function') {\n\n\t\t\tvalue.chunk = val.toString();\n\t\t\tvalue.type  = 'Function';\n\n\t\t} else if (val instanceof Array) {\n\n\t\t\tvalue.chunk = JSON.stringify(val);\n\t\t\tvalue.type  = 'Array';\n\n\t\t} else if (val instanceof Object) {\n\n\t\t\tvalue.chunk = JSON.stringify(val);\n\t\t\tvalue.type  = 'Object';\n\n\t\t}\n\n\n\t\treturn value;\n\n\t};\n\n\tconst _get_chunk = function(str1, str2, code) {\n\n\t\tlet i1 = code.indexOf(str1);\n\t\tlet i2 = code.indexOf(str2, i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\treturn code.substr(i1 + str1.length, i2 - i1 - str1.length + str2.length).trim();\n\t\t}\n\n\t\treturn 'undefined';\n\n\t};\n\n\tconst _detect_type = function(str) {\n\n\t\tlet type = 'undefined';\n\n\n\t\tif (str === 'undefined') {\n\t\t\ttype = 'undefined';\n\t\t} else if (str === '-Infinity' || str === 'Infinity') {\n\t\t\ttype = 'Number';\n\t\t} else if (str === 'null') {\n\t\t\ttype = 'null';\n\t\t} else if (str === 'true' || str === 'false') {\n\t\t\ttype = 'Boolean';\n\t\t} else if (str.includes('===') && !str.includes('?')) {\n\t\t\ttype = 'Boolean';\n\t\t} else if (str.includes('&&') && !str.includes('?')) {\n\t\t\ttype = 'Boolean';\n\t\t} else if (str === '[]' || str.startsWith('[') || str.startsWith('Array.from')) {\n\t\t\ttype = 'Array';\n\t\t} else if (str === '{}' || str.startsWith('{')) {\n\t\t\ttype = 'Object';\n\t\t} else if (str.startsWith('Composite.')) {\n\t\t\ttype = 'Enum';\n\t\t} else if (str.startsWith('new Composite')) {\n\t\t\ttype = 'Composite';\n\t\t} else if (str.startsWith('new Promise')) {\n\t\t\ttype = 'Promise';\n\t\t} else if (str.startsWith('new ')) {\n\n\t\t\tlet tmp = str.substr(4);\n\t\t\tlet i1  = tmp.indexOf('(');\n\t\t\tif (i1 !== -1) {\n\t\t\t\ttmp = tmp.substr(0, i1);\n\t\t\t}\n\n\t\t\ttype = tmp;\n\n\t\t} else if (str.startsWith('\\'') && str.endsWith('\\'')) {\n\t\t\ttype = 'String';\n\t\t} else if (str.startsWith('\"') && str.endsWith('\"')) {\n\t\t\ttype = 'String';\n\t\t} else if (str.startsWith('\\'') || str.startsWith('\"')) {\n\t\t\ttype = 'String';\n\t\t} else if (str.includes('toString(') || str.includes('join(')) {\n\t\t\ttype = 'String';\n\t\t} else if (str.startsWith('0b') || str.startsWith('0x') || str.startsWith('0o') || /^[0-9.]+$/g.test(str) || /^-[0-9.]+$/g.test(str)) {\n\t\t\ttype = 'Number';\n\t\t} else if (str === 'Infinity') {\n\t\t\ttype = 'Number';\n\t\t} else if (str.includes(' + ') && (str.includes('\\'') || str.includes('\"') || str.includes('.substr(') || str.includes('.trim()'))) {\n\t\t\ttype = 'String';\n\t\t} else if (str.includes(' * ') || str.includes(' / ') || str.includes(' + ') || str.includes(' - ')) {\n\t\t\ttype = 'Number';\n\t\t} else {\n\n\t\t\tif (str.includes('instanceof') && str.includes('?') && str.includes(':')) {\n\n\t\t\t\tlet tmp = str.split(/(.*)instanceof\\s([A-Za-z0-9_.]+)([\\s]+)\\?(.*)/g);\n\t\t\t\tif (tmp.length > 2) {\n\t\t\t\t\ttype = tmp[2];\n\t\t\t\t}\n\n\t\t\t} else if (str.startsWith('typeof') && str.includes('===') && str.includes('?') && str.includes(':')) {\n\n\t\t\t\tlet tmp = (str.split('?')[0].split('===')[1] || '').trim();\n\t\t\t\tif (tmp.startsWith('\\'') || tmp.startsWith('\"')) {\n\t\t\t\t\ttmp = tmp.substr(1, tmp.length - 2);\n\t\t\t\t}\n\n\n\t\t\t\tswitch (tmp) {\n\t\t\t\t\tcase 'undefined': type = 'undefined'; break;\n\t\t\t\t\tcase 'null':      type = 'null';      break;\n\t\t\t\t\tcase 'boolean':   type = 'Boolean';   break;\n\t\t\t\t\tcase 'number':    type = 'Number';    break;\n\t\t\t\t\tcase 'string':    type = 'String';    break;\n\t\t\t\t\tcase 'function':  type = 'Function';  break;\n\t\t\t\t\tcase 'object':    type = 'Object';    break;\n\t\t\t\t\tdefault:          type = 'undefined'; break;\n\t\t\t\t}\n\n\n\t\t\t\tif (type === 'undefined') {\n\n\t\t\t\t\tlet tmp1 = str.split(':').pop();\n\t\t\t\t\tif (tmp1.endsWith(';')) {\n\t\t\t\t\t\ttmp1 = tmp1.substr(0, tmp1.length - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\ttype = _detect_type(tmp1.trim());\n\n\t\t\t\t}\n\n\t\t\t} else if (str.includes('/g.test(')  && str.includes('?') && str.includes(':')) {\n\n\t\t\t\ttype = 'String';\n\n\t\t\t} else if (str.endsWith('| 0') || str.endsWith('| 0;')) {\n\n\t\t\t\ttype = 'Number';\n\n\t\t\t} else if (str.includes('!== undefined') && str.includes('?') && str.includes(':')) {\n\n\t\t\t\ttype = 'Object';\n\n\t\t\t} else if (str.startsWith('lychee.deserialize') || str.startsWith('_lychee.deserialize')) {\n\n\t\t\t\tif (str.includes('lychee.serialize(')) {\n\n\t\t\t\t\tlet tmp = str.split(/lychee\\.deserialize\\(lychee\\.serialize\\(([A-Za-z0-9_.]+)\\)\\)/g);\n\t\t\t\t\tif (tmp.length > 2) {\n\t\t\t\t\t\ttype = 'undefined';\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet tmp = str.split(/lychee\\.deserialize\\(([A-Za-z0-9_.]+)\\)/g);\n\t\t\t\t\tif (tmp.length > 2) {\n\t\t\t\t\t\ttype = 'Object';\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if (str.startsWith('lychee.assignunlink') || str.startsWith('_lychee.assignunlink')) {\n\n\t\t\t\ttype = 'Object';\n\n\t\t\t} else if (str.startsWith('lychee.diff') || str.startsWith('_lychee.diff')) {\n\n\t\t\t\ttype = 'Object';\n\n\t\t\t} else if (str.startsWith('lychee.enumof') || str.startsWith('_lychee.enumof')) {\n\n\t\t\t\ttype = 'Enum';\n\n\t\t\t} else if (str.startsWith('lychee.import') || str.startsWith('_lychee.import')) {\n\n\t\t\t\tlet tmp = str.split(/lychee.import\\('([A-Za-z0-9_.]+)'\\)/g);\n\t\t\t\tif (tmp.length === 3) {\n\n\t\t\t\t\tlet name = tmp[1].split('.');\n\t\t\t\t\tlet last = name[name.length - 1];\n\t\t\t\t\tif (last.charAt(0).toUpperCase() === last.charAt(0)) {\n\n\t\t\t\t\t\tif (name.length > 1) {\n\t\t\t\t\t\t\ttype = 'lychee.Definition';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttype = last;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = 'lychee.Namespace';\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if (str.startsWith('lychee.interfaceof') || str.startsWith('_lychee.interfaceof')) {\n\n\t\t\t\tlet tmp = str.split(/lychee.interfaceof\\(([A-Za-z0-9_.]+),(.*)\\)/g);\n\t\t\t\tif (tmp.length > 1) {\n\t\t\t\t\ttype = tmp[1];\n\t\t\t\t}\n\n\t\t\t} else if (str === 'this') {\n\n\t\t\t\ttype = 'Object';\n\n\t\t\t} else if (str.startsWith('this.')) {\n\n\t\t\t\ttype = 'undefined';\n\n\t\t\t} else if (str.endsWith(' || null')) {\n\n\t\t\t\tlet tmp1 = str.substr(0, str.length - 8).trim();\n\n\t\t\t\ttype = _detect_type(tmp1);\n\n\n\t\t\t\t// XXX: Assume Object || null\n\t\t\t\tif (type === 'undefined') {\n\t\t\t\t\ttype = 'Object';\n\t\t\t\t}\n\n\t\t\t} else if (str === 'main') {\n\n\t\t\t\ttype = 'lychee.app.Main';\n\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn type;\n\n\t};\n\n\tconst _clone_value = function(data) {\n\n\t\tlet clone = undefined;\n\n\t\tif (data !== undefined) {\n\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(JSON.stringify(data));\n\t\t\t} catch (err) {\n\t\t\t}\n\n\t\t}\n\n\t\treturn clone;\n\n\t};\n\n\tconst _parse_value = function(str) {\n\n\t\tlet val = undefined;\n\t\tif (/(this|global)/g.test(str) === false) {\n\n\t\t\ttry {\n\t\t\t\tval = eval('(' + str + ')');\n\t\t\t} catch (err) {\n\t\t\t}\n\n\t\t}\n\n\t\treturn val;\n\n\t};\n\n\tconst _detect_value = function(str) {\n\n\t\tlet value = undefined;\n\n\n\t\tif (str === 'undefined') {\n\t\t\tvalue = undefined;\n\t\t} else if (str === '-Infinity' || str === 'Infinity') {\n\t\t\tvalue = 'Infinity';\n\t\t} else if (str === 'null') {\n\t\t\tvalue = null;\n\t\t} else if (str === 'true' || str === 'false') {\n\t\t\tvalue = str === 'true';\n\t\t} else if (str.includes('===') && !str.includes('?')) {\n\t\t\tvalue = true;\n\t\t} else if (str.includes('&&') && !str.includes('?')) {\n\t\t\tvalue = true;\n\t\t} else if (str === '[]' || str.startsWith('[')) {\n\n\t\t\tlet tmp = _parse_value(str);\n\t\t\tif (tmp === undefined) {\n\t\t\t\ttmp = [];\n\t\t\t}\n\n\t\t\tvalue = tmp;\n\n\t\t} else if (str === '{}' || str.startsWith('{')) {\n\n\t\t\tlet tmp = _parse_value(str);\n\t\t\tif (tmp === undefined) {\n\t\t\t\ttmp = {};\n\t\t\t}\n\n\t\t\tvalue = tmp;\n\n\t\t} else if (str.startsWith('Composite.')) {\n\t\t\tvalue = str;\n\t\t} else if (str.startsWith('new Composite')) {\n\t\t\tvalue = str;\n\t\t} else if (str.startsWith('new Promise')) {\n\t\t\tvalue = str;\n\t\t} else if (str.startsWith('new ')) {\n\n\t\t\tlet tmp = str.substr(4);\n\t\t\tlet i1  = tmp.indexOf('(');\n\t\t\tlet i2  = tmp.indexOf(')', i1);\n\n\t\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\t\ttmp = tmp.substr(i1 + 1, i2 - i1 - 1);\n\n\t\t\t\tif (tmp.includes(',') === false) {\n\t\t\t\t\tvalue = _parse_value(tmp);\n\t\t\t\t}\n\n\t\t\t} else if (i1 !== -1) {\n\t\t\t\tvalue = '<' + tmp.substr(0, i1) + '>';\n\t\t\t}\n\n\t\t} else if (str.startsWith('\\'') && str.endsWith('\\'')) {\n\t\t\tvalue = str.substr(1, str.length - 2);\n\t\t} else if (str.startsWith('\"') && str.endsWith('\"')) {\n\t\t\tvalue = str.substr(1, str.length - 2);\n\t\t} else if (str.startsWith('\\'') || str.startsWith('\"')) {\n\t\t\tvalue = \"<string>\";\n\t\t} else if (str.includes('toString(') || str.includes('join(')) {\n\t\t\tvalue = \"<string>\";\n\t\t} else if (str.startsWith('0b') || str.startsWith('0x') || str.startsWith('0o') || /^[0-9.]+$/g.test(str) || /^-[0-9.]+$/g.test(str)) {\n\t\t\tvalue = _parse_value(str);\n\t\t} else if (str === 'Infinity') {\n\t\t\tvalue = Infinity;\n\t\t} else if (str.includes(' + ') && (str.includes('\\'') || str.includes('\"') || str.includes('.substr(') || str.includes('.trim()'))) {\n\t\t\tvalue = \"<string>\";\n\t\t} else if (str.includes(' * ') || str.includes(' / ') || str.includes(' + ') || str.includes(' - ')) {\n\t\t\tvalue = 1337;\n\t\t} else {\n\n\t\t\tif (str.includes('instanceof') && str.includes('?') && str.includes(':')) {\n\n\t\t\t\tlet tmp = str.split(':').pop();\n\t\t\t\tif (tmp.endsWith(';')) {\n\t\t\t\t\ttmp = tmp.substr(0, tmp.length - 1);\n\t\t\t\t}\n\n\t\t\t\tvalue = _detect_value(tmp.trim());\n\n\t\t\t} else if (str.startsWith('typeof') && str.includes('?') && str.includes(':')) {\n\n\t\t\t\tlet tmp = str.split(':').pop();\n\t\t\t\tif (tmp.endsWith(';')) {\n\t\t\t\t\ttmp = tmp.substr(0, tmp.length - 1);\n\t\t\t\t}\n\n\t\t\t\tvalue = _detect_value(tmp.trim());\n\n\t\t\t} else if (str.includes('/g.test(')  && str.includes('?') && str.includes(':')) {\n\n\t\t\t\tlet tmp = str.split(':').pop();\n\t\t\t\tif (tmp.endsWith(';')) {\n\t\t\t\t\ttmp = tmp.substr(0, tmp.length - 1);\n\t\t\t\t}\n\n\t\t\t\tvalue = _detect_value(tmp.trim());\n\n\t\t\t} else if (str.endsWith('| 0') || str.endsWith('| 0;')) {\n\n\t\t\t\tvalue = 1337;\n\n\t\t\t} else if (str.includes('!== undefined') && str.includes('?') && str.includes(':')) {\n\n\t\t\t\tvalue = {};\n\n\t\t\t} else if (str.startsWith('lychee.deserialize') || str.startsWith('_lychee.deserialize')) {\n\n\t\t\t\tif (str.includes('lychee.serialize(')) {\n\n\t\t\t\t\tlet tmp = str.split(/lychee\\.deserialize\\(lychee\\.serialize\\(([A-Za-z0-9_.]+)\\)\\)/g);\n\t\t\t\t\tif (tmp.length > 2) {\n\n\t\t\t\t\t\tvalue = {\n\t\t\t\t\t\t\t'reference': tmp[1],\n\t\t\t\t\t\t\t'arguments': []\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet tmp = str.split(/lychee\\.deserialize\\(([A-Za-z0-9_.]+)\\)/g);\n\t\t\t\t\tif (tmp.length > 2) {\n\t\t\t\t\t\tvalue = {};\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if (str.startsWith('lychee.assignunlink') || str.startsWith('_lychee.assignunlink')) {\n\n\t\t\t\tvalue = {};\n\n\t\t\t} else if (str.startsWith('lychee.diff') || str.startsWith('_lychee.diff')) {\n\n\t\t\t\tvalue = {};\n\n\t\t\t} else if (str.startsWith('lychee.enumof') || str.startsWith('_lychee.enumof')) {\n\n\t\t\t\tlet tmp = str.split(/lychee\\.enumof\\(Composite\\.([A-Z]+),(.*)\\)/g);\n\t\t\t\tif (tmp.length > 2) {\n\t\t\t\t\tvalue = 'Composite.' + tmp[1];\n\t\t\t\t}\n\n\t\t\t} else if (str.startsWith('lychee.import') || str.startsWith('_lychee.import')) {\n\n\t\t\t\tlet tmp = str.split(/lychee\\.import\\('([A-Za-z0-9_.]+)'\\)/g);\n\t\t\t\tif (tmp.length > 2) {\n\n\t\t\t\t\tvalue = {\n\t\t\t\t\t\t'reference': tmp[1],\n\t\t\t\t\t\t'arguments': []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t} else if (str.startsWith('lychee.interfaceof') || str.startsWith('_lychee.interfaceof')) {\n\n\t\t\t\tif (str.indexOf(':') !== -1) {\n\n\t\t\t\t\tlet tmp = str.split(':').pop();\n\t\t\t\t\tif (tmp.endsWith(';')) {\n\t\t\t\t\t\ttmp = tmp.substr(0, tmp.length - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = _detect_value(tmp.trim());\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet tmp = str.substr(19, str.indexOf(',') - 19).trim();\n\t\t\t\t\tif (tmp.length > 0) {\n\t\t\t\t\t\tvalue = tmp;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if (str === 'this') {\n\n\t\t\t\tvalue = 'this';\n\n\t\t\t} else if (str.startsWith('this.')) {\n\n\t\t\t\tvalue = {\n\t\t\t\t\t'reference': str,\n\t\t\t\t\t'arguments': []\n\t\t\t\t};\n\n\t\t\t} else if (str.endsWith(' || null')) {\n\n\t\t\t\tlet tmp1 = str.substr(0, str.length - 8).trim();\n\n\t\t\t\tvalue = _detect_value(tmp1);\n\n\t\t\t\t// XXX: Assume Object || null\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\tvalue = {};\n\t\t\t\t}\n\n\t\t\t} else if (str === 'main') {\n\n\t\t\t\tvalue = {\n\t\t\t\t\t'constructor': 'lychee.app.Main',\n\t\t\t\t\t'arguments': []\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\n\t\treturn value;\n\n\t};\n\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Module = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'strainer.api.PARSER',\n\t\t\t\t'blob':      null\n\t\t\t};\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CUSTOM API\n\t\t */\n\n\t\tdetect: function(str) {\n\n\t\t\tstr = typeof str === 'string' ? str : 'undefined';\n\n\n\t\t\tif (str.startsWith('=')) {\n\t\t\t\tstr = str.substr(1).trim();\n\t\t\t}\n\n\t\t\tif (str.endsWith(';')) {\n\t\t\t\tstr = str.substr(0, str.length - 1);\n\t\t\t}\n\n\n\t\t\tlet val = {\n\t\t\t\tchunk: 'undefined',\n\t\t\t\ttype:  'undefined',\n\t\t\t\tvalue: undefined\n\t\t\t};\n\n\n\t\t\t// XXX: This is explicitely to prevent parser\n\t\t\t// from endless looping while parsing itself\n\n\t\t\tval.chunk = str;\n\t\t\tval.type  = _detect_type(str);\n\t\t\tval.value = _detect_value(str);\n\n\n\t\t\tlet dictionary = [];\n\n\t\t\tif (\n\t\t\t\tval.chunk !== 'undefined'\n\t\t\t\t&& val.chunk.includes('.') === false\n\t\t\t\t&& val.value === undefined\n\t\t\t) {\n\n\t\t\t\tdictionary = _DICTIONARY.filter(function(other) {\n\n\t\t\t\t\tif (val.chunk.startsWith(other.chunk)) {\n\n\t\t\t\t\t\tif (other.type !== undefined) {\n\n\t\t\t\t\t\t\tif (val.type === 'undefined' || val.type === other.type) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if (other.types !== undefined) {\n\n\t\t\t\t\t\t\tif (val.type === 'undefined' || other.types.includes(val.type)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}).sort(function(a, b) {\n\t\t\t\t\tif (a.chunk.length === b.chunk.length) return -1;\n\t\t\t\t\tif (a.chunk.length !== b.chunk.length) return  1;\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t} else if (\n\t\t\t\tval.chunk !== 'undefined'\n\t\t\t\t&& val.chunk.startsWith('global')\n\t\t\t\t&& val.value === undefined\n\t\t\t) {\n\n\t\t\t\tlet reference = val.chunk.split('.').slice(1).join('.');\n\t\t\t\tlet platform  = null;\n\t\t\t\tlet pointer   = null;\n\n\t\t\t\tfor (let p = 0, pl = _PLATFORMS.length; p < pl; p++) {\n\n\t\t\t\t\tplatform = _PLATFORMS[p];\n\n\t\t\t\t\tif (_FEATURES[platform] !== undefined) {\n\n\t\t\t\t\t\tpointer = _resolve_reference.call(_FEATURES[platform], reference);\n\n\t\t\t\t\t\tif (pointer !== null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (pointer !== null) {\n\n\t\t\t\t\tlet resolved = _resolve_value(pointer);\n\t\t\t\t\tif (resolved.type !== 'undefined') {\n\n\t\t\t\t\t\tval.value = resolved.value;\n\t\t\t\t\t\tval.type  = resolved.type;\n\t\t\t\t\t\tval.chunk = resolved.chunk;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn('strainer.api.PARSER: Could not resolve \"' + reference + '\" via feature detection.');\n\n\t\t\t\t}\n\n\t\t\t} else if (\n\t\t\t\tval.chunk !== 'undefined'\n\t\t\t\t&& val.value === undefined\n\t\t\t) {\n\n\t\t\t\tdictionary = _DICTIONARY.filter(function(other) {\n\n\t\t\t\t\tif (val.chunk === other.chunk) {\n\n\t\t\t\t\t\tif (other.type !== undefined) {\n\n\t\t\t\t\t\t\tif (val.type === 'undefined' || val.type === other.type) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if (other.types !== undefined) {\n\n\t\t\t\t\t\t\tif (val.type === 'undefined' || other.types.includes(val.type)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}).sort(function(a, b) {\n\t\t\t\t\tif (a.chunk.length === b.chunk.length) return -1;\n\t\t\t\t\tif (a.chunk.length !== b.chunk.length) return  1;\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t}\n\n\n\t\t\tlet entry = dictionary[0] || null;\n\t\t\tif (entry !== null) {\n\n\t\t\t\tif (entry.type !== undefined && entry.value !== undefined) {\n\n\t\t\t\t\tval.type  = entry.type;\n\t\t\t\t\tval.value = entry.value;\n\n\t\t\t\t} else if (entry.types !== undefined && entry.values !== undefined) {\n\n\t\t\t\t\tval.type  = entry.types[0];\n\t\t\t\t\tval.value = entry.values[0];\n\n\t\t\t\t}\n\n\n\t\t\t\tif (val.chunk !== entry.chunk) {\n\n\t\t\t\t\tif (lychee.debug === true) {\n\t\t\t\t\t\tconsole.info('strainer.api.PARSER: Fuzzy guessing for \"' + val.chunk + '\" with \"' + entry.chunk + '\".');\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn val;\n\n\t\t},\n\n\t\tenum: function(code) {\n\n\t\t\tcode = typeof code === 'string' ? code : '';\n\n\n\t\t\tlet enam  = { name: undefined };\n\t\t\tlet lines = code.split('\\n');\n\t\t\tlet first = lines[0].trim();\n\n\t\t\tif (first.includes('=')) {\n\t\t\t\tenam.name = first.substr(0, first.indexOf('=')).trim();\n\t\t\t}\n\n\n\t\t\t// XXX: Multi-Line Enum\n\t\t\tif (first.endsWith('{')) {\n\n\t\t\t\tenam.values = [];\n\t\t\t\tlines.shift();\n\n\n\t\t\t\tlines.filter(function(line) {\n\n\t\t\t\t\tif (line.includes(':')) {\n\n\t\t\t\t\t\tlet tmp = line.trim();\n\t\t\t\t\t\tif (tmp.startsWith('//') === false) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}).map(function(line) {\n\n\t\t\t\t\tlet i1 = line.indexOf(':');\n\t\t\t\t\tlet i2 = line.indexOf(',', i1);\n\n\t\t\t\t\tif (i2 === -1) i2 = line.length;\n\n\t\t\t\t\tlet key = line.substr(0, i1).trim();\n\t\t\t\t\tlet val = line.substr(i1 + 2, i2 - i1 - 2).trim();\n\n\t\t\t\t\tif (key.startsWith('\\'')) key = key.substr(1);\n\t\t\t\t\tif (key.endsWith('\\''))   key = key.substr(0, key.length - 1);\n\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname:  key,\n\t\t\t\t\t\tvalue: Module.detect(val)\n\t\t\t\t\t};\n\n\t\t\t\t}).forEach(function(val) {\n\n\t\t\t\t\tif (val.value.type !== 'undefined') {\n\n\t\t\t\t\t\tenam.values.push(val);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif (lychee.debug === true) {\n\t\t\t\t\t\t\tconsole.warn('strainer.api.PARSER: No valid enum value \"' + enam.value.chunk + '\" for \"' + enam.name + '\".');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\n\t\t\t// XXX: Single-Line Enum\n\t\t\t} else {\n\n\t\t\t\tlet tmp = lines.join(' ').trim();\n\t\t\t\tlet i1  = tmp.indexOf('=');\n\t\t\t\tlet i2  = tmp.indexOf(';', i1);\n\n\t\t\t\tif (i2 === -1) i2 = tmp.length;\n\n\t\t\t\tlet val = tmp.substr(i1 + 2, i2 - i1 - 2).trim();\n\n\t\t\t\tenam.value = Module.detect(val);\n\n\t\t\t}\n\n\n\t\t\treturn enam;\n\n\t\t},\n\n\t\tevents: function(code) {\n\n\t\t\tcode = typeof code === 'string' ? code : '';\n\n\n\t\t\tlet events = [];\n\t\t\tlet lines  = code.split('\\n');\n\t\t\tlet first  = lines[0].trim();\n\t\t\tlet last   = lines[lines.length - 1].trim();\n\n\n\t\t\tif (first.startsWith('function(') && first.endsWith(') {')) {\n\t\t\t\tlines.shift();\n\t\t\t}\n\n\t\t\tif (last.endsWith('}')) {\n\t\t\t\tlines.pop();\n\t\t\t}\n\n\n\t\t\tlines.map(function(line) {\n\t\t\t\treturn line.trim();\n\t\t\t}).filter(function(line) {\n\n\t\t\t\tif (\n\t\t\t\t\tline.includes('that.trigger(')\n\t\t\t\t\t|| line.includes('this.trigger(')\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t}).map(function(line) {\n\n\t\t\t\tlet chunk = line.trim();\n\n\t\t\t\tlet i1 = chunk.indexOf('trigger(');\n\t\t\t\tlet i2 = chunk.indexOf(');');\n\n\t\t\t\tif (i2 !== -1) {\n\t\t\t\t\tchunk = chunk.substr(i1 + 8, i2 - i1 - 8).trim();\n\t\t\t\t} else {\n\t\t\t\t\tchunk = line.substr(i1 + 8) + _get_chunk(line, ');', code);\n\t\t\t\t\tchunk = chunk.substr(0, chunk.length - 2).trim();\n\t\t\t\t}\n\n\t\t\t\tif (chunk.includes(',')) {\n\n\t\t\t\t\tlet tmp1 = chunk.split(',')[0].trim();\n\t\t\t\t\tlet tmp2 = chunk.split(',').slice(1).join(',').trim();\n\t\t\t\t\tlet tmp3 = [];\n\n\t\t\t\t\tif (tmp1.startsWith('\\'')) tmp1 = tmp1.substr(1);\n\t\t\t\t\tif (tmp1.endsWith('\\''))   tmp1 = tmp1.substr(0, tmp1.length - 1);\n\n\t\t\t\t\tif (tmp2.startsWith('[') && tmp2.endsWith(']')) {\n\n\t\t\t\t\t\ttmp2.substr(1, tmp2.length - 2).split(',').forEach(function(val) {\n\t\t\t\t\t\t\ttmp3.push(Module.detect(val.trim()));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname:       tmp1,\n\t\t\t\t\t\tparameters: tmp3\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet tmp1 = chunk;\n\n\t\t\t\t\tif (tmp1.startsWith('\\'')) tmp1 = tmp1.substr(1);\n\t\t\t\t\tif (tmp1.endsWith('\\''))   tmp1 = tmp1.substr(0, tmp1.length - 1);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname:       tmp1,\n\t\t\t\t\t\tparameters: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}).forEach(function(val) {\n\n\t\t\t\tif (val.parameters.length > 0) {\n\n\t\t\t\t\tval.parameters.forEach(function(param) {\n\n\t\t\t\t\t\tlet chunk = param.chunk;\n\t\t\t\t\t\tlet type  = param.type;\n\n\t\t\t\t\t\tif (type === 'undefined' && /^([A-Za-z0-9]+)$/g.test(chunk)) {\n\n\t\t\t\t\t\t\tlet mutations = Module.mutations(chunk, code);\n\t\t\t\t\t\t\tif (mutations.length > 0) {\n\n\t\t\t\t\t\t\t\tlet val = mutations.find(function(mutation) {\n\t\t\t\t\t\t\t\t\treturn mutation.type !== 'undefined';\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (val !== undefined) {\n\n\t\t\t\t\t\t\t\t\tparam.type  = val.type;\n\t\t\t\t\t\t\t\t\tparam.value = val.value;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tif (lychee.debug === true) {\n\t\t\t\t\t\t\t\t\tconsole.warn('strainer.api.PARSER: No traceable mutations for parameter \"' + chunk + '\".');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\n\t\t\t\tevents.push(val);\n\n\t\t\t});\n\n\n\t\t\treturn events;\n\n\t\t},\n\n\t\thash: function(code) {\n\n\t\t\tcode = typeof code === 'string' ? code : '';\n\n\n\t\t\tlet hash = new _MURMUR();\n\n\t\t\thash.update(code);\n\n\t\t\treturn hash.digest().toString('hex');\n\n\t\t},\n\n\t\tparameters: function(code) {\n\n\t\t\tcode = typeof code === 'string' ? code : '';\n\n\n\t\t\tlet parameters = [];\n\t\t\tlet lines      = code.split('\\n');\n\t\t\tlet first      = lines[0].trim();\n\t\t\tlet last       = lines[lines.length - 1].trim();\n\n\t\t\tif (first.startsWith('function(') && first.endsWith(') {')) {\n\n\t\t\t\tlines.shift();\n\n\t\t\t\tlet tmp1 = first.split(/function\\((.*)\\)/g);\n\t\t\t\tif (tmp1.length > 1) {\n\n\t\t\t\t\tlet tmp2 = tmp1[1].trim();\n\t\t\t\t\tif (tmp2.length > 0) {\n\n\t\t\t\t\t\ttmp2.split(',').forEach(function(val) {\n\n\t\t\t\t\t\t\tparameters.push({\n\t\t\t\t\t\t\t\tchunk: null,\n\t\t\t\t\t\t\t\tname:  val.trim(),\n\t\t\t\t\t\t\t\ttype:  'undefined',\n\t\t\t\t\t\t\t\tvalue: undefined\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (last.endsWith('}')) {\n\t\t\t\tlines.pop();\n\t\t\t}\n\n\n\t\t\tlines.map(function(line) {\n\t\t\t\treturn line.trim();\n\t\t\t}).filter(function(line) {\n\n\t\t\t\tif (\n\t\t\t\t\tline === ''\n\t\t\t\t\t|| line.startsWith('//')\n\t\t\t\t\t|| line.startsWith('/*')\n\t\t\t\t\t|| line.startsWith('*/')\n\t\t\t\t\t|| line.startsWith('*')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}).forEach(function(line) {\n\n\t\t\t\tparameters.forEach(function(param) {\n\n\t\t\t\t\tif (line.startsWith(param.name) && line.includes('=')) {\n\n\t\t\t\t\t\tlet tmp = line.substr(line.indexOf('=') + 1).trim();\n\t\t\t\t\t\tlet val = Module.detect(tmp);\n\n\t\t\t\t\t\tif (val.type !== 'undefined') {\n\n\t\t\t\t\t\t\tif (param.type === val.type) {\n\n\t\t\t\t\t\t\t\tif (param.value === undefined) {\n\t\t\t\t\t\t\t\t\tparam.chunk = val.chunk;\n\t\t\t\t\t\t\t\t\tparam.value = val.value;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else if (param.type === 'undefined') {\n\n\t\t\t\t\t\t\t\tparam.chunk = val.chunk;\n\t\t\t\t\t\t\t\tparam.type  = val.type;\n\t\t\t\t\t\t\t\tparam.value = val.value;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t});\n\n\n\t\t\treturn parameters;\n\n\t\t},\n\n\t\tsettings: function(code) {\n\n\t\t\tcode = typeof code === 'string' ? code : '';\n\n\n\t\t\tlet settings = {};\n\t\t\tlet lines    = code.split('\\n');\n\t\t\tlet first    = lines[0].trim();\n\t\t\tlet last     = lines[lines.length - 1].trim();\n\n\t\t\tif (first.startsWith('function(') && first.endsWith(') {')) {\n\t\t\t\tlines.shift();\n\t\t\t}\n\n\t\t\tif (last.endsWith('}')) {\n\t\t\t\tlines.pop();\n\t\t\t}\n\n\n\t\t\tlines.map(function(line) {\n\t\t\t\treturn line.trim();\n\t\t\t}).filter(function(line) {\n\n\t\t\t\tif (\n\t\t\t\t\tline === ''\n\t\t\t\t\t|| line.startsWith('//')\n\t\t\t\t\t|| line.startsWith('/*')\n\t\t\t\t\t|| line.startsWith('*/')\n\t\t\t\t\t|| line.startsWith('*')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}).forEach(function(line) {\n\n\t\t\t\tif (line.startsWith('this.set') && line.includes('settings.')) {\n\n\t\t\t\t\tlet tmp = line.split(/\\(settings\\.([A-Za-z]+)\\);/g);\n\t\t\t\t\tif (tmp.pop() === '') {\n\t\t\t\t\t\tsettings[tmp[1]] = tmp[0].split('.').pop();\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t});\n\n\n\t\t\treturn settings;\n\n\t\t},\n\n\t\tmutations: function(name, code) {\n\n\t\t\tname = typeof name === 'string' ? name : 'undefined_variable';\n\t\t\tcode = typeof code === 'string' ? code : '';\n\n\n\t\t\tlet mutations = [];\n\t\t\tlet lines     = code.split('\\n');\n\n\n\t\t\tlines.filter(function(line) {\n\n\t\t\t\tif (line.endsWith(';') || line.endsWith('= {')) {\n\n\t\t\t\t\tlet i1 = line.indexOf(name);\n\t\t\t\t\tlet i2 = line.indexOf('=', i1);\n\t\t\t\t\tlet i3 = line.indexOf('.', i1);\n\t\t\t\t\tlet i4 = line.indexOf('[', i1);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\ti1 !== -1\n\t\t\t\t\t\t&& i2 !== -1\n\t\t\t\t\t\t&& (i3 === -1 || i3 > i2)\n\t\t\t\t\t\t&& (i4 === -1 || i4 > i2)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t}).map(function(line) {\n\n\t\t\t\tlet tmp = line.trim();\n\t\t\t\tif (tmp.endsWith(' = {')) {\n\n\t\t\t\t\tlet chunk = _get_chunk(line, '};', code);\n\t\t\t\t\tif (chunk !== 'undefined') {\n\t\t\t\t\t\treturn tmp + chunk;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\n\t\t\t}).map(function(line) {\n\n\t\t\t\tlet i1 = line.indexOf('=');\n\t\t\t\tlet i2 = line.indexOf(';', i1);\n\t\t\t\tif (i2 === -1) {\n\t\t\t\t\ti2 = line.length;\n\t\t\t\t}\n\n\t\t\t\treturn line.substr(i1 + 2, i2 - i1 - 2);\n\n\t\t\t}).map(function(chunk) {\n\t\t\t\treturn Module.detect(chunk);\n\t\t\t}).filter(function(val) {\n\n\t\t\t\tlet chunk = val.chunk;\n\t\t\t\tlet type  = val.type;\n\n\t\t\t\tif (type !== 'undefined' || chunk.startsWith('_') || chunk.startsWith('this.')) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t}).forEach(function(val) {\n\t\t\t\tmutations.push(val);\n\t\t\t});\n\n\n\t\t\treturn mutations;\n\n\t\t},\n\n\t\tvalues: function(code) {\n\n\t\t\tcode = typeof code === 'string' ? code : '';\n\n\n\t\t\tlet candidates = [];\n\t\t\tlet values     = [];\n\t\t\tlet lines      = code.split('\\n');\n\t\t\tlet is_comment = false;\n\t\t\tlet nest_level = 0;\n\t\t\tlet first      = lines[0].trim();\n\t\t\tlet last       = lines[lines.length - 1].trim();\n\n\t\t\tif (first.startsWith('function(') && first.endsWith(') {')) {\n\t\t\t\tlines.shift();\n\t\t\t}\n\n\t\t\tif (last.endsWith('}')) {\n\t\t\t\tlines.pop();\n\t\t\t}\n\n\n\t\t\tlines.map(function(line) {\n\t\t\t\treturn line.trim();\n\t\t\t}).filter(function(line) {\n\n\t\t\t\tif (line.startsWith('//')) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (line.startsWith('/*')) {\n\t\t\t\t\tis_comment = true;\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (line.endsWith('*/')) {\n\t\t\t\t\tis_comment = false;\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (is_comment === true) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\n\t\t\t\tlet result = false;\n\n\t\t\t\t// XXX: Following algorithm crashes itself\n\t\t\t\tif (\n\t\t\t\t\t!line.includes('line.includes(')\n\t\t\t\t\t&& !line.includes('line.endsWith(')\n\t\t\t\t) {\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(line.includes('(function') && line.endsWith('{'))\n\t\t\t\t\t\t|| (line.includes(', function') && line.endsWith('{'))\n\t\t\t\t\t\t|| line.endsWith('=> {')\n\t\t\t\t\t) {\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!line.includes('})')\n\t\t\t\t\t\t\t&& !line.includes('}, function')\n\t\t\t\t\t\t\t&& line !== '}, {'\n\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\tif (line.startsWith('return ')) {\n\t\t\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnest_level++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tline.startsWith('}')\n\t\t\t\t\t\t&& (\n\t\t\t\t\t\t\tline.includes(').')\n\t\t\t\t\t\t\t|| line.endsWith(')')\n\t\t\t\t\t\t\t|| line.endsWith(');')\n\t\t\t\t\t\t\t|| line.endsWith('}.bind(this));')\n\t\t\t\t\t\t\t|| line.endsWith(') || null;')\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!line.includes('(function')\n\t\t\t\t\t\t\t&& !line.includes('({')\n\t\t\t\t\t\t\t&& !line.endsWith(') {')\n\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\tif (nest_level > 0) {\n\t\t\t\t\t\t\t\tnest_level--;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (result === false && nest_level === 0 && line.includes('return ')) {\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\n\n\t\t\t\treturn result;\n\n\t\t\t}).map(function(line) {\n\n\t\t\t\tlet chunk = line.trim();\n\n\t\t\t\tlet i1 = chunk.indexOf('return ');\n\t\t\t\tlet i2 = chunk.indexOf(';', i1);\n\t\t\t\tif (i2 !== -1) {\n\t\t\t\t\treturn Module.detect(chunk.substr(i1 + 7, i2 - i1 - 7).trim());\n\t\t\t\t}\n\n\t\t\t\tchunk = line.substr(i1 + 7) + ' ' + _get_chunk(line, ';', code);\n\t\t\t\tchunk = chunk.substr(0, chunk.length - 1);\n\n\t\t\t\treturn Module.detect(chunk.trim());\n\n\t\t\t}).forEach(function(val) {\n\n\t\t\t\tlet chunk = val.chunk;\n\t\t\t\tlet type  = val.type;\n\t\t\t\tlet value = val.value;\n\n\t\t\t\tif (type === 'undefined' && /^([A-Za-z0-9]+)$/g.test(chunk)) {\n\n\t\t\t\t\tlet mutations = Module.mutations(chunk, code);\n\t\t\t\t\tif (mutations.length > 0) {\n\n\t\t\t\t\t\tmutations.forEach(function(mutation) {\n\n\t\t\t\t\t\t\tcandidates.push({\n\t\t\t\t\t\t\t\tchunk: mutation.chunk,\n\t\t\t\t\t\t\t\ttype:  mutation.type,\n\t\t\t\t\t\t\t\tvalue: mutation.value\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t});\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif (lychee.debug === true) {\n\t\t\t\t\t\t\tconsole.warn('strainer.api.PARSER: No traceable mutations for value \"' + chunk + '\".');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if (type !== 'undefined' || chunk.startsWith('_') || chunk.startsWith('this.')) {\n\n\t\t\t\t\tcandidates.push({\n\t\t\t\t\t\tchunk: chunk,\n\t\t\t\t\t\ttype:  type,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif (lychee.debug === true) {\n\t\t\t\t\t\tconsole.warn('strainer.api.PARSER: No traceable values for \"' + chunk + '\".');\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t});\n\n\n\t\t\tcandidates.forEach(function(val) {\n\n\t\t\t\tlet found = values.find(function(other) {\n\n\t\t\t\t\tlet otype = other.type;\n\t\t\t\t\tif (otype === val.type) {\n\n\t\t\t\t\t\tif (otype === 'Array' || otype === 'Object') {\n\t\t\t\t\t\t\treturn lychee.diff(other.value, val.value) === false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn other.value === val.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}) || null;\n\n\t\t\t\tif (found === null) {\n\t\t\t\t\tvalues.push(val);\n\t\t\t\t}\n\n\t\t\t});\n\n\n\t\t\treturn values;\n\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"lychee.crypto.MURMUR":{"constructor":"lychee.Definition","arguments":[{"id":"lychee.crypto.MURMUR","url":"/libraries/lychee/source/crypto/MURMUR.js"}],"blob":{"attaches":{},"exports":"function (lychee, global, attachments) {\n\n\tconst _C1  = 0xcc9e2d51;\n\tconst _C1B = 0x85ebca6b;\n\tconst _C2  = 0x1b873593;\n\tconst _C2B = 0xc2b2ae35;\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Composite = function() {\n\n\t\tthis.__hash = 0;\n\n\t};\n\n\n\tComposite.prototype = {\n\n\t\t/*\n\t\t * ENTITY API\n\t\t */\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'constructor': 'lychee.crypto.MURMUR',\n\t\t\t\t'arguments':   []\n\t\t\t};\n\n\t\t},\n\n\n\n\t\t/*\n\t\t * CRYPTO API\n\t\t */\n\n\t\tupdate: function(data) {\n\n\t\t\tdata = data instanceof Buffer ? data : new Buffer(data, 'utf8');\n\n\n\t\t\tlet remain = data.length % 4;\n\t\t\tlet bytes  = data.length - remain;\n\n\t\t\tlet b   = 0;\n\t\t\tlet h1  = this.__hash;\n\t\t\tlet h1b = 0;\n\t\t\tlet k1  = 0;\n\n\n\t\t\twhile (b < bytes) {\n\n\t\t\t\tk1 = ((data[b] & 0xff)) | ((data[b + 1] & 0xff) << 8) | ((data[b + 2] & 0xff) << 16) | ((data[b + 3] & 0xff) << 24);\n\t\t\t\tk1 = ((((k1 & 0xffff) * _C1) + ((((k1 >>> 16) * _C1) & 0xffff) << 16))) & 0xffffffff;\n\t\t\t\tk1 = (k1 << 15) | (k1 >>> 17);\n\t\t\t\tk1 = ((((k1 & 0xffff) * _C2) + ((((k1 >>> 16) * _C2) & 0xffff) << 16))) & 0xffffffff;\n\n\t\t\t\th1 ^= k1;\n\t\t\t\th1  = (h1 << 13) | (h1 >>> 19);\n\t\t\t\th1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n\t\t\t\th1  = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n\n\t\t\t\tb += 4;\n\n\t\t\t}\n\n\n\t\t\tk1 = 0;\n\n\n\t\t\tif (remain === 3) {\n\n\t\t\t\tk1 ^= (data[b + 2] & 0xff) << 16;\n\n\t\t\t} else if (remain === 2) {\n\n\t\t\t\tk1 ^= (data[b + 1] & 0xff) << 8;\n\n\t\t\t} else if (remain === 1) {\n\n\t\t\t\tk1 ^= (data[b] & 0xff);\n\n\t\t\t\tk1 = (((k1 & 0xffff) * _C1) + ((((k1 >>> 16) * _C1) & 0xffff) << 16)) & 0xffffffff;\n\t\t\t\tk1 = (k1 << 15) | (k1 >>> 17);\n\t\t\t\tk1 = (((k1 & 0xffff) * _C2) + ((((k1 >>> 16) * _C2) & 0xffff) << 16)) & 0xffffffff;\n\t\t\t\th1 ^= k1;\n\n\t\t\t}\n\n\n\t\t\th1 ^= data.length;\n\n\t\t\th1 ^= h1 >>> 16;\n\t\t\th1  = (((h1 & 0xffff) * _C1B) + ((((h1 >>> 16) * _C1B) & 0xffff) << 16)) & 0xffffffff;\n\t\t\th1 ^= h1 >>> 13;\n\t\t\th1  = (((h1 & 0xffff) * _C2B) + ((((h1 >>> 16) * _C2B) & 0xffff) << 16)) & 0xffffffff;\n\t\t\th1 ^= h1 >>> 16;\n\n\n\t\t\tthis.__hash = h1 >>> 0;\n\n\t\t},\n\n\t\tdigest: function() {\n\n\t\t\tlet hash = (this.__hash).toString(16);\n\t\t\tif (hash.length % 2 === 1) {\n\t\t\t\thash = '0' + hash;\n\t\t\t}\n\n\t\t\treturn new Buffer(hash, 'hex');\n\n\t\t}\n\n\t};\n\n\n\treturn Composite;\n\n}"}},"strainer.api.Callback":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.api.Callback","url":"/libraries/strainer/source/api/Callback.js"}],"blob":{"attaches":{},"requires":["strainer.api.PARSER"],"exports":"function (lychee, global, attachments) {\n\n\tconst _PARSER = lychee.import('strainer.api.PARSER');\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _validate_asset = function(asset) {\n\n\t\tif (asset instanceof Object && typeof asset.serialize === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst _find_reference = function(chunk, stream, fuzzy) {\n\n\t\tfuzzy = fuzzy === true;\n\n\n\t\tlet ref = {\n\t\t\tchunk:  '',\n\t\t\tline:   0,\n\t\t\tcolumn: 0\n\t\t};\n\n\t\tlet lines = stream.split('\\n');\n\t\tlet line  = lines.findIndex(function(other) {\n\n\t\t\tif (fuzzy === true) {\n\t\t\t\treturn other.includes(chunk.trim());\n\t\t\t} else {\n\t\t\t\treturn other.trim() === chunk.trim();\n\t\t\t}\n\n\t\t});\n\n\t\tif (line !== -1) {\n\n\t\t\tref.chunk = lines[line];\n\t\t\tref.line  = line + 1;\n\n\t\t\tlet column = lines[line].indexOf(chunk);\n\t\t\tif (column !== -1) {\n\t\t\t\tref.column = column + 1;\n\t\t\t}\n\n\t\t}\n\n\t\treturn ref;\n\n\t};\n\n\tconst _find_memory = function(key, stream) {\n\n\t\tlet str1 = 'const ' + key + ' = ';\n\t\tlet str2 = '\\n\\t};';\n\n\t\tlet i1 = stream.indexOf(str1);\n\t\tlet i2 = stream.indexOf(str2, i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\treturn stream.substr(i1 + str1.length, i2 - i1 - str1.length + str2.length).trim();\n\t\t}\n\n\t\treturn 'undefined';\n\n\t};\n\n\tconst _parse_memory = function(memory, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('.exports(function(lychee, global, attachments) {');\n\t\tlet i2 = stream.indexOf('\\n\\tconst Module =');\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tlet body = stream.substr(i1 + 48, i2 - i1 - 48).trim();\n\t\t\tif (body.length > 0) {\n\n\t\t\t\tbody.split('\\n')\n\t\t\t\t\t.map(function(line) {\n\t\t\t\t\t\treturn line.trim();\n\t\t\t\t\t}).filter(function(line) {\n\t\t\t\t\t\treturn line.startsWith('const ');\n\t\t\t\t\t}).forEach(function(line) {\n\n\t\t\t\t\t\tlet tmp = line.substr(6).trim();\n\t\t\t\t\t\tlet i1  = tmp.indexOf('=');\n\t\t\t\t\t\tif (i1 !== -1) {\n\n\t\t\t\t\t\t\tlet key   = tmp.substr(0, i1).trim();\n\t\t\t\t\t\t\tlet chunk = tmp.substr(i1 + 1).trim();\n\n\t\t\t\t\t\t\tif (key !== '' && chunk !== '') {\n\n\t\t\t\t\t\t\t\tif (chunk.startsWith('function(')) {\n\n\t\t\t\t\t\t\t\t\tchunk = _find_memory(key, stream);\n\n\t\t\t\t\t\t\t\t\tif (chunk.endsWith(';')) {\n\t\t\t\t\t\t\t\t\t\tchunk = chunk.substr(0, chunk.length - 1);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tmemory[key] = {\n\t\t\t\t\t\t\t\t\t\tbody:       chunk,\n\t\t\t\t\t\t\t\t\t\thash:       _PARSER.hash(chunk),\n\t\t\t\t\t\t\t\t\t\tparameters: _PARSER.parameters(chunk),\n\t\t\t\t\t\t\t\t\t\tvalues:     _PARSER.values(chunk)\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tmemory[key] = _PARSER.detect(chunk);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_constructor = function(constructor, stream) {\n\n\t\tlet i1 = stream.indexOf('\\n\\tconst Callback =');\n\t\tlet i2 = stream.indexOf('\\n\\t};', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tlet body = stream.substr(i1 + 19, i2 - i1 - 16).trim();\n\t\t\tif (body.length > 0) {\n\n\t\t\t\tconstructor.body       = body;\n\t\t\t\tconstructor.hash       = _PARSER.hash(body);\n\t\t\t\tconstructor.parameters = _PARSER.parameters(body);\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Module = {\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'strainer.api.Callback',\n\t\t\t\t'arguments': []\n\t\t\t};\n\n\t\t},\n\n\t\tcheck: function(asset) {\n\n\t\t\tasset = _validate_asset(asset) === true ? asset : null;\n\n\n\t\t\tlet errors = [];\n\t\t\tlet memory = {};\n\t\t\tlet result = {\n\t\t\t\tconstructor: {\n\t\t\t\t\tbody:       null,\n\t\t\t\t\thash:       null,\n\t\t\t\t\tparameters: []\n\t\t\t\t},\n\t\t\t\tsettings:    {},\n\t\t\t\tproperties:  {},\n\t\t\t\tenums:       {},\n\t\t\t\tevents:      {},\n\t\t\t\tmethods:     {}\n\t\t\t};\n\n\t\t\tif (asset !== null) {\n\n\t\t\t\tlet stream = asset.buffer.toString('utf8');\n\n\t\t\t\t_parse_memory(memory, stream, errors);\n\t\t\t\t_parse_constructor(result.constructor, stream, errors);\n\n\n\t\t\t\tlet ref = _find_reference('\\n\\tconst Callback = function(', stream, true);\n\t\t\t\tif (ref.chunk === '') {\n\n\t\t\t\t\tref = _find_reference('Callback =', stream, true);\n\n\t\t\t\t\terrors.push({\n\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\trule:      'no-callback',\n\t\t\t\t\t\treference: 'constructor',\n\t\t\t\t\t\tmessage:   'Callback is not constant (missing \"const\" declaration).',\n\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn {\n\t\t\t\terrors: errors,\n\t\t\t\tmemory: memory,\n\t\t\t\tresult: result\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"strainer.api.Composite":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.api.Composite","url":"/libraries/strainer/source/api/Composite.js"}],"blob":{"attaches":{},"requires":["strainer.api.PARSER"],"exports":"function (lychee, global, attachments) {\n\n\tconst _PARSER = lychee.import('strainer.api.PARSER');\n\n\n\n\t/*\n\t * CACHES\n\t */\n\n\tconst _SERIALIZE = {\n\t\tbody:       'function() { return {}; }',\n\t\tchunk:      'function() {',\n\t\thash:       _PARSER.hash('function() { return {}; }'),\n\t\tparameters: [],\n\t\tvalues:     [{\n\t\t\ttype: 'SerializationBlob',\n\t\t\tvalue: {\n\t\t\t\t'constructor': null,\n\t\t\t\t'arguments':   [],\n\t\t\t\t'blob':        null\n\t\t\t}\n\t\t}]\n\t};\n\n\tconst _DESERIALIZE = {\n\t\tbody:       'function(blob) {}',\n\t\tchunk:      'function(blob) {',\n\t\thash:       _PARSER.hash('function(blob) {}'),\n\t\tparameters: [{\n\t\t\tname:  'blob',\n\t\t\ttype:  'SerializationBlob',\n\t\t\tvalue: {}\n\t\t}],\n\t\tvalues: [{\n\t\t\ttype:  'undefined',\n\t\t\tvalue: undefined\n\t\t}]\n\t};\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _validate_asset = function(asset) {\n\n\t\tif (asset instanceof Object && typeof asset.serialize === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst _find_reference = function(chunk, stream, fuzzy) {\n\n\t\tfuzzy = fuzzy === true;\n\n\n\t\tlet ref = {\n\t\t\tchunk:  '',\n\t\t\tline:   0,\n\t\t\tcolumn: 0\n\t\t};\n\n\t\tlet lines = stream.split('\\n');\n\t\tlet line  = lines.findIndex(function(other) {\n\n\t\t\tif (fuzzy === true) {\n\t\t\t\treturn other.includes(chunk.trim());\n\t\t\t} else {\n\t\t\t\treturn other.trim() === chunk.trim();\n\t\t\t}\n\n\t\t});\n\n\t\tif (line !== -1) {\n\n\t\t\tref.chunk = lines[line];\n\t\t\tref.line  = line + 1;\n\n\t\t\tlet column = lines[line].indexOf(chunk);\n\t\t\tif (column !== -1) {\n\t\t\t\tref.column = column + 1;\n\t\t\t}\n\n\t\t}\n\n\t\treturn ref;\n\n\t};\n\n\tconst _find_enum = function(key, stream) {\n\n\t\tlet str1 = '\\n\\tComposite.' + key + ' = ';\n\t\tlet str2 = ';';\n\n\t\tlet i0 = stream.indexOf('\\n\\tconst Composite =');\n\t\tlet i1 = stream.indexOf(str1, i0);\n\t\tlet i2 = stream.indexOf(str2, i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\treturn key + ' = ' + stream.substr(i1 + str1.length, i2 - i1 - str1.length + str2.length);\n\t\t}\n\n\t\treturn 'undefined';\n\n\t};\n\n\tconst _find_statement = function(line, stream) {\n\n\t\tlet i1 = stream.indexOf(line);\n\t\tlet i2 = stream.indexOf(';', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\treturn (line + stream.substr(i1 + line.length, i2 - i1 - line.length + 1)).trim();\n\t\t}\n\n\t\treturn 'undefined';\n\n\t};\n\n\tconst _find_memory = function(key, stream) {\n\n\t\tlet str1 = 'const ' + key + ' = ';\n\t\tlet str2 = '\\n\\t};';\n\n\t\tlet i1 = stream.indexOf(str1);\n\t\tlet i2 = stream.indexOf(str2, i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\treturn stream.substr(i1 + str1.length, i2 - i1 - str1.length + str2.length).trim();\n\t\t}\n\n\t\treturn 'undefined';\n\n\t};\n\n\tconst _find_method = function(key, stream) {\n\n\t\tlet str1 = '\\n\\t\\t' + key + ': function';\n\t\tlet str2 = '\\n\\t\\t}';\n\n\t\tlet i0 = stream.indexOf('\\n\\tComposite.prototype = {');\n\t\tlet i1 = stream.indexOf(str1, i0);\n\t\tlet i2 = stream.indexOf(str2, i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\treturn 'function' + stream.substr(i1 + str1.length, i2 - i1 - str1.length + str2.length).trim();\n\t\t}\n\n\t\treturn 'undefined';\n\n\t};\n\n\tconst _parse_memory = function(memory, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('.exports(function(lychee, global, attachments) {');\n\t\tlet i2 = stream.indexOf('\\n\\tconst Composite =');\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tlet body = stream.substr(i1 + 48, i2 - i1 - 48).trim();\n\t\t\tif (body.length > 0) {\n\n\t\t\t\tbody.split('\\n')\n\t\t\t\t\t.map(function(line) {\n\t\t\t\t\t\treturn line.trim();\n\t\t\t\t\t}).filter(function(line) {\n\t\t\t\t\t\treturn line.startsWith('const ');\n\t\t\t\t\t}).forEach(function(line) {\n\n\t\t\t\t\t\tlet tmp = line.substr(6).trim();\n\t\t\t\t\t\tlet i1  = tmp.indexOf('=');\n\t\t\t\t\t\tif (i1 !== -1) {\n\n\t\t\t\t\t\t\tlet key   = tmp.substr(0, i1).trim();\n\t\t\t\t\t\t\tlet chunk = tmp.substr(i1 + 1).trim();\n\n\t\t\t\t\t\t\tif (key !== '' && chunk !== '') {\n\n\t\t\t\t\t\t\t\tif (chunk.startsWith('function(')) {\n\n\t\t\t\t\t\t\t\t\tchunk = _find_memory(key, stream);\n\n\t\t\t\t\t\t\t\t\tif (chunk.endsWith(';')) {\n\t\t\t\t\t\t\t\t\t\tchunk = chunk.substr(0, chunk.length - 1);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tmemory[key] = {\n\t\t\t\t\t\t\t\t\t\tbody:       chunk,\n\t\t\t\t\t\t\t\t\t\thash:       _PARSER.hash(chunk),\n\t\t\t\t\t\t\t\t\t\tparameters: _PARSER.parameters(chunk),\n\t\t\t\t\t\t\t\t\t\tvalues:     _PARSER.values(chunk)\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tmemory[key] = _PARSER.detect(chunk);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_constructor = function(constructor, stream) {\n\n\t\tlet i1 = stream.indexOf('\\n\\tconst Composite =');\n\t\tlet i2 = stream.indexOf('\\n\\t};', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tlet body = stream.substr(i1 + 20, i2 - i1 - 17).trim();\n\t\t\tif (body.length > 0) {\n\n\t\t\t\tconstructor.body       = body;\n\t\t\t\tconstructor.hash       = _PARSER.hash(body);\n\t\t\t\tconstructor.parameters = _PARSER.parameters(body);\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_settings = function(settings, stream) {\n\n\t\tlet i1 = stream.indexOf('\\n\\tconst Composite =');\n\t\tlet i2 = stream.indexOf('\\n\\t};', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tlet body = stream.substr(i1 + 20, i2 - i1 - 17).trim();\n\t\t\tif (body.length > 0) {\n\n\t\t\t\tlet object = _PARSER.settings(body);\n\t\t\t\tif (Object.keys(object).length > 0) {\n\n\t\t\t\t\tfor (let o in object) {\n\t\t\t\t\t\tsettings[o] = object[o];\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_properties = function(properties, stream) {\n\n\t\tlet i1 = stream.indexOf('\\n\\tconst Composite =');\n\t\tlet i2 = stream.indexOf('\\n\\t};', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tlet body = stream.substr(i1 + 20, i2 - i1 - 17).trim();\n\t\t\tif (body.length > 0) {\n\n\t\t\t\tbody.split('\\n').forEach(function(line, l, self) {\n\n\t\t\t\t\tlet chunk = line.trim();\n\t\t\t\t\tif (chunk.startsWith('this.') && chunk.includes(' = ')) {\n\n\t\t\t\t\t\tif (chunk.endsWith('[') || chunk.endsWith('{')) {\n\n\t\t\t\t\t\t\tlet statement = _find_statement(line, body);\n\t\t\t\t\t\t\tif (statement !== 'undefined') {\n\t\t\t\t\t\t\t\tchunk = statement;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tlet tmp = chunk.split(/this\\.([A-Za-z_]+)([\\s]+)=([\\s]+)([^\\0]*);/g).filter(function(ch) {\n\t\t\t\t\t\t\treturn ch.trim() !== '';\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (tmp.length === 2) {\n\n\t\t\t\t\t\t\tlet name = tmp[0];\n\t\t\t\t\t\t\tlet prop = _PARSER.detect(tmp[1]);\n\t\t\t\t\t\t\tif (prop.type === 'undefined' && /^([A-Za-z0-9]+)$/g.test(prop.chunk)) {\n\n\t\t\t\t\t\t\t\tlet mutations = _PARSER.mutations(prop.chunk, body);\n\t\t\t\t\t\t\t\tif (mutations.length > 0) {\n\n\t\t\t\t\t\t\t\t\tlet val = mutations.find(function(mutation) {\n\t\t\t\t\t\t\t\t\t\treturn mutation.type !== 'undefined';\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tif (val !== undefined) {\n\t\t\t\t\t\t\t\t\t\tprop.type  = val.type;\n\t\t\t\t\t\t\t\t\t\tprop.value = val.value;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tproperties[name] === undefined\n\t\t\t\t\t\t\t\t|| (\n\t\t\t\t\t\t\t\t\tprop.type !== 'undefined'\n\t\t\t\t\t\t\t\t\t&& (\n\t\t\t\t\t\t\t\t\t\tproperties[name].value.type === 'undefined'\n\t\t\t\t\t\t\t\t\t\t|| properties[name].value.type === 'null'\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\tproperties[name] = {\n\t\t\t\t\t\t\t\t\tchunk: chunk,\n\t\t\t\t\t\t\t\t\tvalue: prop\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_enums = function(enums, stream) {\n\n\t\tlet i1 = stream.indexOf('\\n\\t};', stream.indexOf('\\n\\tconst Composite =')) + 4;\n\t\tlet i2 = stream.indexOf('\\n\\tComposite.prototype =', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tstream.substr(i1, i2 - i1).trim().split('\\n')\n\t\t\t\t.filter(function(line) {\n\n\t\t\t\t\tlet tmp = line.trim();\n\t\t\t\t\tif (tmp.startsWith('Composite.') && tmp.includes('=')) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}).forEach(function(chunk) {\n\n\t\t\t\t\tlet enam = null;\n\n\t\t\t\t\tif (chunk.includes('//')) {\n\t\t\t\t\t\tchunk = chunk.split('//')[0];\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (chunk.endsWith(';')) {\n\n\t\t\t\t\t\tenam = _PARSER.enum(chunk.trim());\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlet name = chunk.split('=')[0].trim().split('.')[1];\n\t\t\t\t\t\tlet body = _find_enum(name, stream);\n\n\t\t\t\t\t\tif (body !== 'undefined') {\n\t\t\t\t\t\t\tenam = _PARSER.enum(body);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (enam !== null && enam.name !== undefined) {\n\n\t\t\t\t\t\tif (enam.values !== undefined) {\n\n\t\t\t\t\t\t\tenums[enam.name] = {\n\t\t\t\t\t\t\t\tvalues: enam.values\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t} else if (enam.value !== undefined) {\n\n\t\t\t\t\t\t\tenums[enam.name] = {\n\t\t\t\t\t\t\t\tvalue: enam.value\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t}\n\n\t};\n\n\tconst _add_event = function(events, event, method) {\n\n\t\tmethod = typeof method === 'string' ? method : null;\n\n\n\t\tlet cache = events[event.name];\n\t\tif (cache === undefined) {\n\n\t\t\tcache = events[event.name] = {\n\t\t\t\tname:       event.name,\n\t\t\t\tmethods:    [],\n\t\t\t\tparameters: event.parameters\n\t\t\t};\n\n\t\t\tif (method !== null) {\n\t\t\t\tcache.methods.push(method);\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif (method !== null) {\n\n\t\t\t\tif (cache.methods.includes(method) === false) {\n\t\t\t\t\tcache.methods.push(method);\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tlet c_params = cache.parameters;\n\t\t\tlet e_params = event.parameters;\n\n\t\t\tif (c_params.length !== e_params.length) {\n\n\t\t\t\tif (c_params.length > e_params.length) {\n\n\t\t\t\t\tc_params.forEach(function(param, c) {\n\n\t\t\t\t\t\tlet other = e_params[c];\n\t\t\t\t\t\tif (other !== undefined) {\n\n\t\t\t\t\t\t\tif (param.type === 'undefined' && other.type !== 'undefined') {\n\t\t\t\t\t\t\t\tparam.chunk = other.chunk;\n\t\t\t\t\t\t\t\tparam.type  = other.type;\n\t\t\t\t\t\t\t\tparam.value = other.value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t\t} else {\n\n\t\t\t\t\te_params.forEach(function(param, e) {\n\n\t\t\t\t\t\tlet other = c_params[e];\n\t\t\t\t\t\tif (other !== undefined) {\n\n\t\t\t\t\t\t\tif (param.type === 'undefined' && other.type !== 'undefined') {\n\t\t\t\t\t\t\t\tparam.chunk = other.chunk;\n\t\t\t\t\t\t\t\tparam.type  = other.type;\n\t\t\t\t\t\t\t\tparam.value = other.value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if (other === undefined) {\n\t\t\t\t\t\t\tc_params[e] = param;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tconst _parse_events = function(constructor, methods, events, stream, errors) {\n\n\t\tlet construct = constructor.body || null;\n\t\tif (construct !== null) {\n\n\t\t\tlet ewents = _PARSER.events(construct);\n\t\t\tif (ewents.length > 0) {\n\n\t\t\t\tewents.forEach(function(event) {\n\t\t\t\t\t_add_event(events, event);\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor (let mid in methods) {\n\n\t\t\tlet method = methods[mid];\n\t\t\tlet body   = method.body;\n\t\t\tlet ewents = _PARSER.events(body);\n\t\t\tif (ewents.length > 0) {\n\n\t\t\t\tewents.forEach(function(event) {\n\t\t\t\t\t_add_event(events, event, mid);\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_methods = function(methods, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('\\n\\tComposite.prototype = {');\n\t\tlet i2 = stream.indexOf('\\n\\t};', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tstream.substr(i1 + 25, i2 - i1 - 25).split('\\n')\n\t\t\t\t.filter(function(line) {\n\n\t\t\t\t\tif (line.startsWith('\\t\\t')) {\n\n\t\t\t\t\t\tlet tmp = line.substr(2);\n\t\t\t\t\t\tif (/^([A-Za-z0-9]+):\\sfunction/g.test(tmp)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else if (tmp.startsWith('// deserialize: function(blob) {}')) {\n\t\t\t\t\t\t\tmethods['deserialize'] = Object.assign({}, _DESERIALIZE);\n\t\t\t\t\t\t} else if (tmp.startsWith('// serialize: function() {}')) {\n\t\t\t\t\t\t\tmethods['serialize'] = Object.assign({}, _SERIALIZE);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}).forEach(function(chunk) {\n\n\t\t\t\t\tlet name = chunk.split(':')[0].trim();\n\t\t\t\t\tlet body = _find_method(name, stream);\n\n\t\t\t\t\tif (body !== 'undefined') {\n\n\t\t\t\t\t\tmethods[name] = {\n\t\t\t\t\t\t\tbody:       body,\n\t\t\t\t\t\t\tchunk:      chunk,\n\t\t\t\t\t\t\thash:       _PARSER.hash(body),\n\t\t\t\t\t\t\tparameters: _PARSER.parameters(body),\n\t\t\t\t\t\t\tvalues:     _PARSER.values(body)\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\n\t\t\tlet deserialize = methods['deserialize'];\n\t\t\tif (deserialize !== undefined) {\n\t\t\t\tif (deserialize.parameters.length === 0) deserialize.parameters = lychee.assignunlink([], _DESERIALIZE.parameters);\n\t\t\t\tif (deserialize.values.length === 0)     deserialize.values     = lychee.assignunlink([], _DESERIALIZE.values);\n\t\t\t}\n\n\t\t\tlet serialize = methods['serialize'];\n\t\t\tif (serialize !== undefined) {\n\t\t\t\tif (serialize.parameters.length === 0) serialize.parameters = lychee.assignunlink([], _SERIALIZE.parameters);\n\t\t\t\tif (serialize.values.length === 0)     serialize.values     = lychee.assignunlink([], _SERIALIZE.values);\n\t\t\t}\n\n\n\t\t\tfor (let mid in methods) {\n\n\t\t\t\tlet method = methods[mid];\n\t\t\t\tlet params = method.parameters;\n\t\t\t\tlet ref    = _find_reference(method.chunk, stream);\n\t\t\t\tlet values = method.values;\n\n\t\t\t\tif (params.length > 0) {\n\n\t\t\t\t\tlet found = params.filter(function(other) {\n\t\t\t\t\t\treturn other.type === 'undefined' && other.value === undefined;\n\t\t\t\t\t}).map(function(other) {\n\t\t\t\t\t\treturn other.name;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (found.length > 0) {\n\n\t\t\t\t\t\tif (/^(control|render|update|deserialize|serialize)$/g.test(mid) === false) {\n\n\t\t\t\t\t\t\tlet key = found[0];\n\t\t\t\t\t\t\tlet col = ref.chunk.indexOf(key);\n\t\t\t\t\t\t\tif (col !== -1) {\n\t\t\t\t\t\t\t\tcol = col + 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcol = ref.column;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\trule:      'no-parameter-value',\n\t\t\t\t\t\t\t\treference: mid,\n\t\t\t\t\t\t\t\tmessage:   'Invalid parameter values for \"' + found.join('\", \"') + '\" for method \"' + mid + '()\".',\n\t\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\t\tcolumn:    col\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif (values.length === 0) {\n\n\t\t\t\t\tif (/^(render|update)$/g.test(mid) === false) {\n\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\trule:      'no-return-value',\n\t\t\t\t\t\t\treference: mid,\n\t\t\t\t\t\t\tmessage:   'Invalid return value for method \"' + mid + '()\".',\n\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tmethod.values.push({\n\t\t\t\t\t\ttype:  'undefined',\n\t\t\t\t\t\tvalue: undefined\n\t\t\t\t\t});\n\n\t\t\t\t} else if (values.length > 0) {\n\n\t\t\t\t\tif (/^(serialize|deserialize)$/g.test(mid) === false) {\n\n\t\t\t\t\t\tvalues.forEach(function(val) {\n\n\t\t\t\t\t\t\tif (val.type === 'undefined' && val.value === undefined) {\n\n\t\t\t\t\t\t\t\tlet message = 'Unguessable return value for method \"' + mid + '()\".';\n\t\t\t\t\t\t\t\tlet chunk   = (val.chunk || '').trim();\n\n\t\t\t\t\t\t\t\tif (chunk !== '') {\n\t\t\t\t\t\t\t\t\tmessage = 'Unguessable return value \"' + chunk + '\" for method \"' + mid + '()\".';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\t\trule:      'unguessable-return-value',\n\t\t\t\t\t\t\t\t\treference: mid,\n\t\t\t\t\t\t\t\t\tmessage:   message,\n\t\t\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Module = {\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'strainer.api.Composite',\n\t\t\t\t'arguments': []\n\t\t\t};\n\n\t\t},\n\n\t\tcheck: function(asset, header) {\n\n\t\t\tasset  = _validate_asset(asset) === true ? asset  : null;\n\t\t\theader = header instanceof Object        ? header : {};\n\n\n\t\t\tlet errors = [];\n\t\t\tlet memory = {};\n\t\t\tlet result = {\n\t\t\t\tconstructor: {\n\t\t\t\t\tbody:       null,\n\t\t\t\t\thash:       null,\n\t\t\t\t\tparameters: []\n\t\t\t\t},\n\t\t\t\tsettings:    {},\n\t\t\t\tproperties:  {},\n\t\t\t\tenums:       {},\n\t\t\t\tevents:      {},\n\t\t\t\tmethods:     {}\n\t\t\t};\n\n\t\t\tif (asset !== null) {\n\n\t\t\t\tlet stream = asset.buffer.toString('utf8');\n\n\t\t\t\t_parse_memory(memory, stream, errors);\n\t\t\t\t_parse_constructor(result.constructor, stream, errors);\n\t\t\t\t_parse_settings(result.settings, stream, errors);\n\t\t\t\t_parse_properties(result.properties, stream, errors);\n\t\t\t\t_parse_enums(result.enums, stream, errors);\n\t\t\t\t_parse_methods(result.methods, stream, errors);\n\t\t\t\t_parse_events(result.constructor, result.methods, result.events, stream, errors);\n\n\n\t\t\t\tif (result.constructor.parameters.length === 1) {\n\n\t\t\t\t\tlet check = result.constructor.parameters[0];\n\t\t\t\t\tif (check.name === 'data' || check.name === 'settings') {\n\n\t\t\t\t\t\tcheck.type = 'Object';\n\n\t\t\t\t\t} else if (/^(main|client|remote|server)$/g.test(check.name) === false) {\n\n\t\t\t\t\t\tlet chunk = result.constructor.body.split('\\n')[0];\n\t\t\t\t\t\tlet ref   = _find_reference('\\n\\tconst Composite = ' + chunk, stream);\n\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\trule:      'no-composite',\n\t\t\t\t\t\t\treference: 'constructor',\n\t\t\t\t\t\t\tmessage:   'Composite has no \"settings\" object.',\n\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet ref = _find_reference('\\n\\tconst Composite = function(', stream, true);\n\t\t\t\t\tif (ref.chunk === '') {\n\n\t\t\t\t\t\tref = _find_reference('Composite =', stream, true);\n\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\trule:      'no-composite',\n\t\t\t\t\t\t\treference: 'constructor',\n\t\t\t\t\t\t\tmessage:   'Composite is not constant (missing \"const\" declaration).',\n\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tlet body = result.constructor.body || null;\n\t\t\t\tif (body !== null) {\n\n\t\t\t\t\tlet check = result.constructor.parameters[0] || null;\n\t\t\t\t\tif (check !== null && check.name === 'data') {\n\n\t\t\t\t\t\tlet ref1 = _find_reference('\\n\\t\\tlet settings = ',  body, true);\n\t\t\t\t\t\tlet ref2 = _find_reference('\\n\\t\\tsettings = null;', body);\n\n\t\t\t\t\t\tif (ref1.line !== 0 && ref2.line === 0) {\n\n\t\t\t\t\t\t\tlet ref = _find_reference('\\n\\t\\tlet settings = ', stream, true);\n\n\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\trule:      'no-garbage',\n\t\t\t\t\t\t\t\treference: 'constructor',\n\t\t\t\t\t\t\t\tmessage:   'Composite produces garbage (missing \"settings = null\" statement).',\n\t\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t} else if (ref1.line === 0) {\n\n\t\t\t\t\t\t\tlet ref = _find_reference('\\n\\tconst Composite = function(', stream, true);\n\n\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\trule:      'no-settings',\n\t\t\t\t\t\t\t\treference: 'constructor',\n\t\t\t\t\t\t\t\tmessage:   'Composite ignores settings (missing \"let settings = Object.assign({}, data)\" statement).',\n\t\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tfor (let name in memory) {\n\n\t\t\t\t\t\tlet entry = memory[name];\n\t\t\t\t\t\tif (entry.type === 'lychee.Definition') {\n\n\t\t\t\t\t\t\tlet id  = entry.value.reference;\n\t\t\t\t\t\t\tlet ref = _find_reference('\\n\\t\\t' + name + '.call(this', body, true);\n\n\t\t\t\t\t\t\tif (header.includes.includes(id) === false && ref.line !== 0) {\n\n\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\t\trule:      'no-includes',\n\t\t\t\t\t\t\t\t\treference: name,\n\t\t\t\t\t\t\t\t\tmessage:   'Invalid Definition (missing includes() entry for \"' + id + '\").',\n\t\t\t\t\t\t\t\t\tline:      0,\n\t\t\t\t\t\t\t\t\tcolumn:    0\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t} else if (header.includes.includes(id) === true && ref.line === 0) {\n\n\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\t\trule:      'no-constructor-call',\n\t\t\t\t\t\t\t\t\treference: name,\n\t\t\t\t\t\t\t\t\tmessage:   'Invalid Definition (missing constructor call for \"' + id + '\").',\n\t\t\t\t\t\t\t\t\tline:      0,\n\t\t\t\t\t\t\t\t\tcolumn:    0\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t} else if (header.includes.includes(id) === false && header.requires.includes(id) === false) {\n\n\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\t\trule:      'no-requires',\n\t\t\t\t\t\t\t\t\treference: name,\n\t\t\t\t\t\t\t\t\tmessage:   'Invalid Definition (missing requires() entry for \"' + id + '\").',\n\t\t\t\t\t\t\t\t\tline:      0,\n\t\t\t\t\t\t\t\t\tcolumn:    0\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tfor (let p in result.properties) {\n\n\t\t\t\t\tlet property = result.properties[p];\n\t\t\t\t\tif (property.value.type === 'undefined') {\n\n\t\t\t\t\t\tlet method = result.methods['set' + p.charAt(0).toUpperCase() + p.substr(1)] || null;\n\t\t\t\t\t\tif (method !== null) {\n\n\t\t\t\t\t\t\tlet found = method.parameters.find(function(val) {\n\t\t\t\t\t\t\t\treturn p === val.name;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (found !== undefined && found.type !== 'undefined') {\n\t\t\t\t\t\t\t\tproperty.value.type = found.type;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (property.value.type === 'undefined' && property.value.value === undefined) {\n\n\t\t\t\t\t\tlet ref = _find_reference(property.chunk, stream);\n\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\trule:      'unguessable-property-value',\n\t\t\t\t\t\t\treference: p,\n\t\t\t\t\t\t\tmessage:   'Unguessable property \"' + p + '\".',\n\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (\n\t\t\t\t\tresult.methods['deserialize'] === undefined\n\t\t\t\t\t|| result.methods['serialize'] === undefined\n\t\t\t\t) {\n\n\t\t\t\t\tlet ref = _find_reference('\\n\\tComposite.prototype =', stream, true);\n\n\t\t\t\t\tif (result.methods['deserialize'] === undefined) {\n\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\trule:      'no-deserialize',\n\t\t\t\t\t\t\treference: 'deserialize',\n\t\t\t\t\t\t\tmessage:   'No \"deserialize()\" method.',\n\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (result.methods['serialize'] === undefined) {\n\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\trule:      'no-serialize',\n\t\t\t\t\t\t\treference: 'serialize',\n\t\t\t\t\t\t\tmessage:    'No \"serialize()\" method.',\n\t\t\t\t\t\t\tline:       ref.line,\n\t\t\t\t\t\t\tcolumn:     ref.column\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn {\n\t\t\t\terrors: errors,\n\t\t\t\tmemory: memory,\n\t\t\t\tresult: result\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"strainer.api.Core":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.api.Core","url":"/libraries/strainer/source/api/Core.js"}],"blob":{"attaches":{},"requires":["strainer.api.PARSER"],"exports":"function (lychee, global, attachments) {\n\n\tconst _PARSER = lychee.import('strainer.api.PARSER');\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _validate_asset = function(asset) {\n\n\t\tif (asset instanceof Object && typeof asset.serialize === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst _parse_identifier = function(result, stream, errors) {\n\n\t\tlet i1  = stream.indexOf('lychee');\n\t\tlet i2  = stream.indexOf('\\n', i1);\n\t\tlet tmp = stream.substr(0, i2).trim();\n\n\t\tif (tmp.includes(' = ') && tmp.endsWith('(function(global) {')) {\n\n\t\t\tlet tmp1 = tmp.split(/lychee\\.([A-Za-z]+)\\s=(.*)/g);\n\t\t\tif (tmp1.length > 1) {\n\n\t\t\t\tlet id = tmp1[1];\n\t\t\t\tif (id.charAt(0) === id.charAt(0).toUpperCase()) {\n\t\t\t\t\tresult.identifier = 'lychee.' + id;\n\t\t\t\t}\n\n\t\t\t} else if (tmp === 'lychee = (function(global) {') {\n\n\t\t\t\tresult.identifier = 'lychee';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\terrors.push({\n\t\t\t\turl:       null,\n\t\t\t\trule:      'no-define',\n\t\t\t\treference: null,\n\t\t\t\tmessage:   'Invalid Definition (missing \"<lychee.Definition> = (function(global) {})()\").',\n\t\t\t\tline:      0,\n\t\t\t\tcolumn:    0\n\t\t\t});\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Module = {\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'strainer.api.Core',\n\t\t\t\t'arguments': []\n\t\t\t};\n\n\t\t},\n\n\t\tcheck: function(asset) {\n\n\t\t\tasset = _validate_asset(asset) === true ? asset : null;\n\n\n\t\t\tlet errors = [];\n\t\t\tlet result = {\n\t\t\t\tidentifier: null,\n\t\t\t\tattaches:   {},\n\t\t\t\ttags:       {},\n\t\t\t\trequires:   [],\n\t\t\t\tincludes:   [],\n\t\t\t\tsupports:   {}\n\t\t\t};\n\n\t\t\tif (asset !== null) {\n\n\t\t\t\tlet stream = asset.buffer.toString('utf8');\n\t\t\t\tlet first  = stream.trim().split('\\n')[0];\n\n\t\t\t\t_parse_identifier(result, stream, errors);\n\n\t\t\t}\n\n\n\t\t\treturn {\n\t\t\t\terrors: errors,\n\t\t\t\tresult: result\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"strainer.api.Definition":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.api.Definition","url":"/libraries/strainer/source/api/Definition.js"}],"blob":{"attaches":{},"requires":["strainer.api.PARSER"],"exports":"function (lychee, global, attachments) {\n\n\tconst _PARSER = lychee.import('strainer.api.PARSER');\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _create_error = function(rule, message) {\n\n\t\treturn {\n\t\t\turl:       null,\n\t\t\trule:      rule,\n\t\t\treference: null,\n\t\t\tmessage:   message,\n\t\t\tline:      0,\n\t\t\tcolumn:    0\n\n\t\t};\n\n\t};\n\n\tconst _validate_asset = function(asset) {\n\n\t\tif (asset instanceof Object && typeof asset.serialize === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst _parse_value = function(str) {\n\n\t\tlet val = undefined;\n\t\tif (/^(this|global)$/g.test(str) === false) {\n\n\t\t\ttry {\n\t\t\t\tval = eval('(' + str + ')');\n\t\t\t} catch (err) {\n\t\t\t}\n\n\t\t}\n\n\t\treturn val;\n\n\t};\n\n\tconst _parse_identifier = function(result, stream, errors) {\n\n\t\tlet i1  = stream.indexOf('lychee');\n\t\tlet i2  = stream.indexOf('\\n', i1);\n\t\tlet tmp = stream.substr(0, i2).trim();\n\n\t\tif (tmp.startsWith('lychee.define(')) {\n\n\t\t\tlet tmp1 = tmp.split(/lychee\\.define\\(\"?'?([A-Za-z.-]+)\"?'?\\)\\.(.*)/g);\n\t\t\tif (tmp1.length > 1) {\n\n\t\t\t\tlet id = tmp1[1];\n\t\t\t\tif (id.charAt(0) === id.charAt(0).toUpperCase()) {\n\t\t\t\t\tresult.identifier = 'lychee.' + id;\n\t\t\t\t} else {\n\t\t\t\t\tresult.identifier = id;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_supports = function(supports, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('supports(');\n\t\tlet i2 = stream.indexOf('})', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tlet body = stream.substr(i1 + 9, i2 - i1 - 8).trim();\n\t\t\tif (body.length > 0) {\n\n\t\t\t\tsupports.body       = body;\n\t\t\t\tsupports.hash       = _PARSER.hash(body);\n\t\t\t\tsupports.parameters = _PARSER.parameters(body);\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_attaches = function(attaches, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('attaches({');\n\t\tlet i2 = stream.indexOf('\\n})', i1);\n\t\tlet i3 = stream.indexOf('exports(function(lychee, global, attachments) {\\n');\n\n\t\tif (i1 !== -1 && i2 !== -1 && i3 !== -1 && i1 < i3) {\n\n\t\t\tlet tmp1 = stream.substr(i1 + 9, i2 - i1 - 7);\n\t\t\tif (tmp1.length > 0 && tmp1.startsWith('{') && tmp1.endsWith('}')) {\n\n\t\t\t\tlet tmp2 = _parse_value(tmp1);\n\t\t\t\tif (tmp2 !== undefined) {\n\n\t\t\t\t\tfor (let t in tmp2) {\n\t\t\t\t\t\tattaches[t] = lychee.serialize(tmp2[t]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_tags = function(tags, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('tags({');\n\t\tlet i2 = stream.indexOf('\\n})', i1);\n\t\tlet i3 = stream.indexOf('exports(function(lychee, global, attachments) {\\n');\n\n\t\tif (i1 !== -1 && i2 !== -1 && i3 !== -1 && i1 < i3) {\n\n\t\t\tlet tmp1 = stream.substr(i1 + 5, i2 - i1 - 3);\n\t\t\tif (tmp1.length > 0 && tmp1.startsWith('{') && tmp1.endsWith('}')) {\n\n\t\t\t\tlet tmp2 = _parse_value(tmp1);\n\t\t\t\tif (tmp2 !== undefined) {\n\n\t\t\t\t\tfor (let t in tmp2) {\n\t\t\t\t\t\ttags[t] = tmp2[t];\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_requires = function(requires, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('requires([');\n\t\tlet i2 = stream.indexOf('\\n])', i1);\n\t\tlet i3 = stream.indexOf('exports(function(lychee, global, attachments) {\\n');\n\n\t\tif (i1 !== -1 && i2 !== -1 && i3 !== -1 && i1 < i3) {\n\n\t\t\tlet tmp1 = stream.substr(i1 + 9, i2 - i1 - 7);\n\t\t\tif (tmp1.length > 0 && tmp1.startsWith('[') && tmp1.endsWith(']')) {\n\n\t\t\t\tlet tmp2 = _parse_value(tmp1);\n\t\t\t\tif (tmp2 !== undefined && tmp2 instanceof Array) {\n\n\t\t\t\t\ttmp2.forEach(function(value) {\n\n\t\t\t\t\t\tif (requires.indexOf(value) === -1) {\n\t\t\t\t\t\t\trequires.push(value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_includes = function(includes, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('includes([');\n\t\tlet i2 = stream.indexOf('\\n])', i1);\n\t\tlet i3 = stream.indexOf('exports(function(lychee, global, attachments) {\\n');\n\n\t\tif (i1 !== -1 && i2 !== -1 && i3 !== -1 && i1 < i3) {\n\n\t\t\tlet tmp1 = stream.substr(i1 + 9, i2 - i1 - 7);\n\t\t\tif (tmp1.length > 0 && tmp1.startsWith('[') && tmp1.endsWith(']')) {\n\n\t\t\t\tlet tmp2 = _parse_value(tmp1);\n\t\t\t\tif (tmp2 !== undefined && tmp2 instanceof Array) {\n\n\t\t\t\t\ttmp2.forEach(function(value) {\n\n\t\t\t\t\t\tif (includes.indexOf(value) === -1) {\n\t\t\t\t\t\t\tincludes.push(value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Module = {\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'strainer.api.Definition',\n\t\t\t\t'arguments': []\n\t\t\t};\n\n\t\t},\n\n\t\tcheck: function(asset) {\n\n\t\t\tasset = _validate_asset(asset) === true ? asset : null;\n\n\n\t\t\tlet errors = [];\n\t\t\tlet result = {\n\t\t\t\tidentifier: null,\n\t\t\t\tattaches:   {},\n\t\t\t\ttags:       {},\n\t\t\t\trequires:   [],\n\t\t\t\tincludes:   [],\n\t\t\t\tsupports:   {}\n\t\t\t};\n\n\t\t\tif (asset !== null) {\n\n\t\t\t\tlet stream = asset.buffer.toString('utf8');\n\n\t\t\t\t_parse_identifier(result, stream, errors);\n\t\t\t\t_parse_attaches(result.attaches, stream, errors);\n\t\t\t\t_parse_tags(result.tags, stream, errors);\n\t\t\t\t_parse_requires(result.requires, stream, errors);\n\t\t\t\t_parse_includes(result.includes, stream, errors);\n\t\t\t\t_parse_supports(result.supports, stream, errors);\n\n\t\t\t\t// XXX: exports are unnecessary\n\t\t\t\t// _parse_exports(result.exports, stream, errors);\n\n\n\t\t\t\tlet i1 = stream.indexOf('lychee.define(');\n\t\t\t\tlet i2 = stream.indexOf('exports(function(lychee, global, attachments) {\\n', i1);\n\n\t\t\t\tif (i1 === -1) {\n\n\t\t\t\t\terrors.push({\n\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\trule:      'no-define',\n\t\t\t\t\t\treference: null,\n\t\t\t\t\t\tmessage:   'Invalid Definition (missing define()).',\n\t\t\t\t\t\tline:      0,\n\t\t\t\t\t\tcolumn:    0\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\tif (i2 === -1) {\n\n\t\t\t\t\terrors.push({\n\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\trule:      'no-exports',\n\t\t\t\t\t\treference: null,\n\t\t\t\t\t\tmessage:   'Invalid Definition (missing exports()).',\n\t\t\t\t\t\tline:      0,\n\t\t\t\t\t\tcolumn:    0\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\n\t\t\t\tlet i3 = stream.indexOf('requires([\\n');\n\t\t\t\tlet i4 = stream.indexOf('includes([\\n');\n\t\t\t\tlet i5 = stream.indexOf('supports(function(lychee, global) {\\n');\n\t\t\t\tlet i6 = stream.indexOf('exports(function(lychee, global, attachments) {\\n');\n\n\t\t\t\tif (i3 !== -1 && i4 !== -1 && i3 > i4) {\n\t\t\t\t\terrors.push(_create_error('no-meta', 'Invalid Definition (\"requires()\" after \"includes()\").'));\n\t\t\t\t}\n\n\t\t\t\tif (i3 !== -1 && i5 !== -1 && i3 > i5) {\n\t\t\t\t\terrors.push(_create_error('no-meta', 'Invalid Definition (\"requires()\" after \"supports()\").'));\n\t\t\t\t}\n\n\t\t\t\tif (i4 !== -1 && i5 !== -1 && i4 > i5) {\n\t\t\t\t\terrors.push(_create_error('no-meta', 'Invalid Definition (\"includes()\" after \"supports()\").'));\n\t\t\t\t}\n\n\t\t\t\tif (i3 !== -1 && i6 !== -1 && i3 > i6) {\n\t\t\t\t\terrors.push(_create_error('no-meta', 'Invalid Definition (\"requires()\" after \"exports()\").'));\n\t\t\t\t}\n\n\t\t\t\tif (i4 !== -1 && i6 !== -1 && i4 > i6) {\n\t\t\t\t\terrors.push(_create_error('no-meta', 'Invalid Definition (\"includes()\" after \"exports()\").'));\n\t\t\t\t}\n\n\t\t\t\tif (i5 !== -1 && i6 !== -1 && i5 > i6) {\n\t\t\t\t\terrors.push(_create_error('no-meta', 'Invalid Definition (\"supports()\" after \"exports()\").'));\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn {\n\t\t\t\terrors: errors,\n\t\t\t\tresult: result\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"strainer.api.Module":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.api.Module","url":"/libraries/strainer/source/api/Module.js"}],"blob":{"attaches":{},"requires":["strainer.api.PARSER"],"exports":"function (lychee, global, attachments) {\n\n\tconst _PARSER = lychee.import('strainer.api.PARSER');\n\n\n\n\t/*\n\t * CACHES\n\t */\n\n\tconst _SERIALIZE = {\n\t\tbody:       'function() { return {}; }',\n\t\tchunk:      'function() {',\n\t\thash:       _PARSER.hash('function() { return {}; }'),\n\t\tparameters: [],\n\t\tvalues:     [{\n\t\t\ttype: 'SerializationBlob',\n\t\t\tvalue: {\n\t\t\t\t'constructor': null,\n\t\t\t\t'arguments':   [],\n\t\t\t\t'blob':        null\n\t\t\t}\n\t\t}]\n\t};\n\n\tconst _DESERIALIZE = {\n\t\tbody:       'function(blob) {}',\n\t\tchunk:      'function(blob) {',\n\t\thash:       _PARSER.hash('function(blob) {}'),\n\t\tparameters: [{\n\t\t\tname:  'blob',\n\t\t\ttype:  'SerializationBlob',\n\t\t\tvalue: {}\n\t\t}],\n\t\tvalues: [{\n\t\t\ttype:  'undefined',\n\t\t\tvalue: undefined\n\t\t}]\n\t};\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _validate_asset = function(asset) {\n\n\t\tif (asset instanceof Object && typeof asset.serialize === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst _find_reference = function(chunk, stream, fuzzy) {\n\n\t\tfuzzy = fuzzy === true;\n\n\n\t\tlet ref = {\n\t\t\tchunk:  '',\n\t\t\tline:   0,\n\t\t\tcolumn: 0\n\t\t};\n\n\t\tlet lines = stream.split('\\n');\n\t\tlet line  = lines.findIndex(function(other) {\n\n\t\t\tif (fuzzy === true) {\n\t\t\t\treturn other.includes(chunk.trim());\n\t\t\t} else {\n\t\t\t\treturn other.trim() === chunk.trim();\n\t\t\t}\n\n\t\t});\n\n\t\tif (line !== -1) {\n\n\t\t\tref.chunk = lines[line];\n\t\t\tref.line  = line + 1;\n\n\t\t\tlet column = lines[line].indexOf(chunk);\n\t\t\tif (column !== -1) {\n\t\t\t\tref.column = column + 1;\n\t\t\t}\n\n\t\t}\n\n\t\treturn ref;\n\n\t};\n\n\tconst _find_memory = function(key, stream) {\n\n\t\tlet str1 = 'const ' + key + ' = ';\n\t\tlet str2 = '\\n\\t};';\n\n\t\tlet i1 = stream.indexOf(str1);\n\t\tlet i2 = stream.indexOf(str2, i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\treturn stream.substr(i1 + str1.length, i2 - i1 - str1.length + str2.length).trim();\n\t\t}\n\n\t\treturn 'undefined';\n\n\t};\n\n\tconst _find_method = function(key, stream) {\n\n\t\tlet str1 = '\\n\\t\\t' + key + ': function';\n\t\tlet str2 = '\\n\\t\\t}';\n\n\t\tlet i0 = stream.indexOf('\\n\\tconst Module = {');\n\t\tlet i1 = stream.indexOf(str1, i0);\n\t\tlet i2 = stream.indexOf(str2, i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\treturn 'function' + stream.substr(i1 + str1.length, i2 - i1 - str1.length + str2.length).trim();\n\t\t}\n\n\t\treturn 'undefined';\n\n\t};\n\n\tconst _find_property = function(key, stream) {\n\n\t\tlet str1 = '\\n\\t\\t' + key + ': {';\n\t\tlet str2 = '\\n\\t\\t}';\n\n\t\tlet i0 = stream.indexOf('\\n\\tconst Module = {');\n\t\tlet i1 = stream.indexOf(str1, i0);\n\t\tlet i2 = stream.indexOf(str2, i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\t\t\treturn stream.substr(i1 + str1.length - 1, i2 - i1 - str1.length + str2.length + 1).trim();\n\t\t}\n\n\t\treturn 'undefined';\n\n\t};\n\n\tconst _parse_memory = function(memory, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('.exports(function(lychee, global, attachments) {');\n\t\tlet i2 = stream.indexOf('\\n\\tconst Module =');\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tlet body = stream.substr(i1 + 48, i2 - i1 - 48).trim();\n\t\t\tif (body.length > 0) {\n\n\t\t\t\tbody.split('\\n')\n\t\t\t\t\t.map(function(line) {\n\t\t\t\t\t\treturn line.trim();\n\t\t\t\t\t}).filter(function(line) {\n\t\t\t\t\t\treturn line.startsWith('const ');\n\t\t\t\t\t}).forEach(function(line) {\n\n\t\t\t\t\t\tlet tmp = line.substr(6).trim();\n\t\t\t\t\t\tlet i1  = tmp.indexOf('=');\n\t\t\t\t\t\tif (i1 !== -1) {\n\n\t\t\t\t\t\t\tlet key   = tmp.substr(0, i1).trim();\n\t\t\t\t\t\t\tlet chunk = tmp.substr(i1 + 1).trim();\n\n\t\t\t\t\t\t\tif (key !== '' && chunk !== '') {\n\n\t\t\t\t\t\t\t\tif (chunk.startsWith('function(')) {\n\n\t\t\t\t\t\t\t\t\tchunk = _find_memory(key, stream);\n\n\t\t\t\t\t\t\t\t\tif (chunk.endsWith(';')) {\n\t\t\t\t\t\t\t\t\t\tchunk = chunk.substr(0, chunk.length - 1);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tmemory[key] = {\n\t\t\t\t\t\t\t\t\t\tbody:       chunk,\n\t\t\t\t\t\t\t\t\t\thash:       _PARSER.hash(chunk),\n\t\t\t\t\t\t\t\t\t\tparameters: _PARSER.parameters(chunk),\n\t\t\t\t\t\t\t\t\t\tvalues:     _PARSER.values(chunk)\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tmemory[key] = _PARSER.detect(chunk);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_methods = function(methods, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('\\n\\tconst Module = {');\n\t\tlet i2 = stream.indexOf('\\n\\t};', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tstream.substr(i1 + 18, i2 - i1 - 18).split('\\n')\n\t\t\t\t.filter(function(line) {\n\n\t\t\t\t\tif (line.startsWith('\\t\\t')) {\n\n\t\t\t\t\t\tlet tmp = line.substr(2);\n\t\t\t\t\t\tif (/^([A-Za-z0-9]+):\\sfunction/g.test(tmp)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else if (tmp.startsWith('// deserialize: function(blob) {}')) {\n\t\t\t\t\t\t\tmethods['deserialize'] = Object.assign({}, _DESERIALIZE);\n\t\t\t\t\t\t} else if (tmp.startsWith('// serialize: function() {}')) {\n\t\t\t\t\t\t\tmethods['serialize'] = Object.assign({}, _SERIALIZE);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}).forEach(function(chunk) {\n\n\t\t\t\t\tlet name = chunk.split(':')[0].trim();\n\t\t\t\t\tlet body = _find_method(name, stream);\n\n\t\t\t\t\tif (body !== 'undefined') {\n\n\t\t\t\t\t\tmethods[name] = {\n\t\t\t\t\t\t\tbody:       body,\n\t\t\t\t\t\t\tchunk:      chunk,\n\t\t\t\t\t\t\thash:       _PARSER.hash(body),\n\t\t\t\t\t\t\tparameters: _PARSER.parameters(body),\n\t\t\t\t\t\t\tvalues:     _PARSER.values(body)\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\n\t\t\tlet deserialize = methods['deserialize'];\n\t\t\tif (deserialize !== undefined) {\n\t\t\t\tif (deserialize.parameters.length === 0) deserialize.parameters = lychee.assignunlink([], _DESERIALIZE.parameters);\n\t\t\t\tif (deserialize.values.length === 0)     deserialize.values     = lychee.assignunlink([], _DESERIALIZE.values);\n\t\t\t}\n\n\t\t\tlet serialize = methods['serialize'];\n\t\t\tif (serialize !== undefined) {\n\t\t\t\tif (serialize.parameters.length === 0) serialize.parameters = lychee.assignunlink([], _SERIALIZE.parameters);\n\t\t\t\tif (serialize.values.length === 0)     serialize.values     = lychee.assignunlink([], _SERIALIZE.values);\n\t\t\t}\n\n\n\t\t\tfor (let mid in methods) {\n\n\t\t\t\tlet method = methods[mid];\n\t\t\t\tlet params = method.parameters;\n\t\t\t\tlet ref    = _find_reference(method.chunk, stream);\n\t\t\t\tlet values = method.values;\n\n\n\t\t\t\tif (params.length > 0) {\n\n\t\t\t\t\tlet found = params.filter(function(other) {\n\t\t\t\t\t\treturn other.type === 'undefined' && other.value === undefined;\n\t\t\t\t\t}).map(function(other) {\n\t\t\t\t\t\treturn other.name;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (found.length > 0) {\n\n\t\t\t\t\t\tif (/^(control|render|update|deserialize|serialize)$/g.test(mid) === false) {\n\n\t\t\t\t\t\t\tlet key = found[0];\n\t\t\t\t\t\t\tlet col = ref.chunk.indexOf(key);\n\t\t\t\t\t\t\tif (col !== -1) {\n\t\t\t\t\t\t\t\tcol = col + 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcol = ref.column;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\trule:      'no-parameter-value',\n\t\t\t\t\t\t\t\treference: mid,\n\t\t\t\t\t\t\t\tmessage:   'Invalid parameter values for \"' + found.join('\", \"') + '\" for method \"' + mid + '()\".',\n\t\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\t\tcolumn:    col\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif (values.length === 0) {\n\n\t\t\t\t\terrors.push({\n\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\trule:      'no-return-value',\n\t\t\t\t\t\treference: mid,\n\t\t\t\t\t\tmessage:   'Invalid return value for method \"' + mid + '()\".',\n\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t});\n\n\n\t\t\t\t\tmethod.values.push({\n\t\t\t\t\t\ttype:  'undefined',\n\t\t\t\t\t\tvalue: undefined\n\t\t\t\t\t});\n\n\t\t\t\t} else if (values.length > 0) {\n\n\t\t\t\t\tif (/^(serialize|deserialize)$/g.test(mid) === false) {\n\n\t\t\t\t\t\tvalues.forEach(function(val) {\n\n\t\t\t\t\t\t\tif (val.type === 'undefined' && val.value === undefined) {\n\n\t\t\t\t\t\t\t\tlet message = 'Unguessable return value for method \"' + mid + '()\".';\n\t\t\t\t\t\t\t\tlet chunk   = (val.chunk || '').trim();\n\n\t\t\t\t\t\t\t\tif (chunk !== '') {\n\t\t\t\t\t\t\t\t\tmessage = 'Unguessable return value \"' + chunk + '\" for method \"' + mid + '()\".';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\t\trule:      'unguessable-return-value',\n\t\t\t\t\t\t\t\t\treference: mid,\n\t\t\t\t\t\t\t\t\tmessage:   message,\n\t\t\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_properties = function(properties, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('\\n\\tconst Module = {');\n\t\tlet i2 = stream.indexOf('\\n\\t};', i1);\n\n\t\tif (i1 !== -1 && i2 !== -1) {\n\n\t\t\tstream.substr(i1 + 18, i2 - i1 - 18).split('\\n')\n\t\t\t\t.filter(function(line) {\n\n\t\t\t\t\tif (line.startsWith('\\t\\t')) {\n\n\t\t\t\t\t\tlet tmp = line.substr(2);\n\t\t\t\t\t\tif (/^([A-Za-z0-9]+):\\sfunction/g.test(tmp)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else if (/^([A-Za-z0-9]+):\\s/g.test(tmp)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}).forEach(function(chunk) {\n\n\t\t\t\t\tif (chunk.endsWith(',')) {\n\n\t\t\t\t\t\tchunk = chunk.substr(0, chunk.length - 1);\n\n\n\t\t\t\t\t\tlet tmp = chunk.split(':');\n\t\t\t\t\t\tif (tmp.length === 2) {\n\n\t\t\t\t\t\t\tlet name = tmp[0].trim();\n\t\t\t\t\t\t\tlet prop = _PARSER.detect(tmp[1].trim());\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tproperties[name] === undefined\n\t\t\t\t\t\t\t\t|| (\n\t\t\t\t\t\t\t\t\tproperties[name].value.type === 'undefined'\n\t\t\t\t\t\t\t\t\t&& prop.type !== 'undefined'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\tproperties[name] = {\n\t\t\t\t\t\t\t\t\tchunk: chunk,\n\t\t\t\t\t\t\t\t\tvalue: prop\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (chunk.endsWith('{')) {\n\n\t\t\t\t\t\tlet tmp = chunk.split(':');\n\t\t\t\t\t\tif (tmp.length === 2) {\n\n\t\t\t\t\t\t\tlet name = tmp[0].trim();\n\t\t\t\t\t\t\tlet body = _find_property(name, stream);\n\t\t\t\t\t\t\tlet prop = _PARSER.detect(body);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tproperties[name] === undefined\n\t\t\t\t\t\t\t\t|| (\n\t\t\t\t\t\t\t\t\tproperties[name].value.type === 'undefined'\n\t\t\t\t\t\t\t\t\t&& prop.type !== 'undefined'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\tproperties[name] = {\n\t\t\t\t\t\t\t\t\tchunk: body,\n\t\t\t\t\t\t\t\t\tvalue: prop\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Module = {\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'strainer.api.Module',\n\t\t\t\t'arguments': []\n\t\t\t};\n\n\t\t},\n\n\t\tcheck: function(asset, header) {\n\n\t\t\tasset  = _validate_asset(asset) === true ? asset  : null;\n\t\t\theader = header instanceof Object        ? header : {};\n\n\n\t\t\tlet errors = [];\n\t\t\tlet memory = {};\n\t\t\tlet result = {\n\t\t\t\tconstructor: {},\n\t\t\t\tsettings:    {},\n\t\t\t\tproperties:  {},\n\t\t\t\tenums:       {},\n\t\t\t\tevents:      {},\n\t\t\t\tmethods:     {}\n\t\t\t};\n\n\t\t\tif (asset !== null) {\n\n\t\t\t\tlet stream = asset.buffer.toString('utf8');\n\n\t\t\t\t_parse_memory(memory, stream, errors);\n\t\t\t\t_parse_methods(result.methods, stream, errors);\n\t\t\t\t_parse_properties(result.properties, stream, errors);\n\n\n\t\t\t\tlet ref = _find_reference('\\n\\tconst Module = {', stream, true);\n\t\t\t\tif (ref.chunk === '') {\n\n\t\t\t\t\tref = _find_reference('Module =', stream, true);\n\n\t\t\t\t\terrors.push({\n\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\trule:      'no-module',\n\t\t\t\t\t\treference: 'constructor',\n\t\t\t\t\t\tmessage:   'Module is not constant (missing \"const\" declaration).',\n\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\n\t\t\t\tfor (let name in memory) {\n\n\t\t\t\t\tlet entry = memory[name];\n\t\t\t\t\tif (entry.type === 'lychee.Definition') {\n\n\t\t\t\t\t\tlet id = entry.value.reference;\n\t\t\t\t\t\tif (header.requires.includes(id) === false) {\n\n\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\t\trule:      'no-requires',\n\t\t\t\t\t\t\t\treference: name,\n\t\t\t\t\t\t\t\tmessage:   'Invalid Definition (missing requires() entry for \"' + id + '\").',\n\t\t\t\t\t\t\t\tline:      0,\n\t\t\t\t\t\t\t\tcolumn:    0\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (\n\t\t\t\t\tresult.methods['deserialize'] === undefined\n\t\t\t\t\t|| result.methods['serialize'] === undefined\n\t\t\t\t) {\n\n\t\t\t\t\tif (result.methods['deserialize'] === undefined) {\n\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\trule:      'no-deserialize',\n\t\t\t\t\t\t\treference: 'deserialize',\n\t\t\t\t\t\t\tmessage:   'No \"deserialize()\" method.',\n\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (result.methods['serialize'] === undefined) {\n\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\t\trule:      'no-serialize',\n\t\t\t\t\t\t\treference: 'serialize',\n\t\t\t\t\t\t\tmessage:   'No \"serialize()\" method.',\n\t\t\t\t\t\t\tline:      ref.line,\n\t\t\t\t\t\t\tcolumn:    ref.column\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn {\n\t\t\t\terrors: errors,\n\t\t\t\tmemory: memory,\n\t\t\t\tresult: result\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}},"strainer.api.Specification":{"constructor":"lychee.Definition","arguments":[{"id":"strainer.api.Specification","url":"/libraries/strainer/source/api/Specification.js"}],"blob":{"attaches":{},"requires":["strainer.api.PARSER"],"exports":"function (lychee, global, attachments) {\n\n\tconst _PARSER = lychee.import('strainer.api.PARSER');\n\n\n\n\t/*\n\t * HELPERS\n\t */\n\n\tconst _create_error = function(rule, message) {\n\n\t\treturn {\n\t\t\turl:       null,\n\t\t\trule:      rule,\n\t\t\treference: null,\n\t\t\tmessage:   message,\n\t\t\tline:      0,\n\t\t\tcolumn:    0\n\n\t\t};\n\n\t};\n\n\tconst _validate_asset = function(asset) {\n\n\t\tif (asset instanceof Object && typeof asset.serialize === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n\tconst _parse_value = function(str) {\n\n\t\tlet val = undefined;\n\t\tif (/^(this|global)$/g.test(str) === false) {\n\n\t\t\ttry {\n\t\t\t\tval = eval('(' + str + ')');\n\t\t\t} catch (err) {\n\t\t\t}\n\n\t\t}\n\n\t\treturn val;\n\n\t};\n\n\tconst _parse_identifier = function(result, stream, errors) {\n\n\t\tlet i1  = stream.indexOf('lychee');\n\t\tlet i2  = stream.indexOf('\\n', i1);\n\t\tlet tmp = stream.substr(0, i2).trim();\n\n\t\tif (tmp.startsWith('lychee.specify(')) {\n\n\t\t\tlet tmp1 = tmp.split(/lychee\\.specify\\(\"?'?([A-Za-z.-]+)\"?'?\\)\\.(.*)/g);\n\t\t\tif (tmp1.length > 1) {\n\n\t\t\t\tlet id = tmp1[1];\n\t\t\t\tif (id.charAt(0) === id.charAt(0).toUpperCase()) {\n\t\t\t\t\tresult.identifier = 'lychee.' + id;\n\t\t\t\t} else {\n\t\t\t\t\tresult.identifier = id;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tconst _parse_requires = function(requires, stream, errors) {\n\n\t\tlet i1 = stream.indexOf('requires([');\n\t\tlet i2 = stream.indexOf('\\n])', i1);\n\t\tlet i3 = stream.indexOf('exports(function(lychee, sandbox) {\\n');\n\n\t\tif (i1 !== -1 && i2 !== -1 && i3 !== -1 && i1 < i3) {\n\n\t\t\tlet tmp1 = stream.substr(i1 + 9, i2 - i1 - 7);\n\t\t\tif (tmp1.length > 0 && tmp1.startsWith('[') && tmp1.endsWith(']')) {\n\n\t\t\t\tlet tmp2 = _parse_value(tmp1);\n\t\t\t\tif (tmp2 !== undefined && tmp2 instanceof Array) {\n\n\t\t\t\t\ttmp2.forEach(function(value) {\n\n\t\t\t\t\t\tif (requires.indexOf(value) === -1) {\n\t\t\t\t\t\t\trequires.push(value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\n\t/*\n\t * IMPLEMENTATION\n\t */\n\n\tconst Module = {\n\n\t\t// deserialize: function(blob) {},\n\n\t\tserialize: function() {\n\n\t\t\treturn {\n\t\t\t\t'reference': 'strainer.api.Specification',\n\t\t\t\t'arguments': []\n\t\t\t};\n\n\t\t},\n\n\t\tcheck: function(asset) {\n\n\t\t\tasset = _validate_asset(asset) === true ? asset : null;\n\n\n\t\t\tlet errors = [];\n\t\t\tlet result = {\n\t\t\t\tidentifier: null,\n\t\t\t\tattaches:   {},\n\t\t\t\ttags:       {},\n\t\t\t\trequires:   [],\n\t\t\t\tincludes:   [],\n\t\t\t\tsupports:   {}\n\t\t\t};\n\n\t\t\tif (asset !== null) {\n\n\t\t\t\tlet stream = asset.buffer.toString('utf8');\n\n\t\t\t\t_parse_identifier(result, stream, errors);\n\t\t\t\t_parse_requires(result.requires, stream, errors);\n\n\n\t\t\t\tlet i1 = stream.indexOf('lychee.specify(');\n\t\t\t\tlet i2 = stream.indexOf('exports(function(lychee, sandbox) {\\n', i1);\n\n\t\t\t\tif (i1 === -1) {\n\n\t\t\t\t\terrors.push({\n\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\trule:      'no-specify',\n\t\t\t\t\t\treference: null,\n\t\t\t\t\t\tmessage:   'Invalid Specification (missing specify()).',\n\t\t\t\t\t\tline:      0,\n\t\t\t\t\t\tcolumn:    0\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\tif (i2 === -1) {\n\n\t\t\t\t\terrors.push({\n\t\t\t\t\t\turl:       null,\n\t\t\t\t\t\trule:      'no-exports',\n\t\t\t\t\t\treference: null,\n\t\t\t\t\t\tmessage:   'Invalid Specification (missing exports()).',\n\t\t\t\t\t\tline:      0,\n\t\t\t\t\t\tcolumn:    0\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\n\t\t\t\tlet i3 = stream.indexOf('requires([\\n');\n\t\t\t\tlet i4 = stream.indexOf('exports(function(lychee, sandbox) {\\n');\n\n\t\t\t\tif (i3 !== -1 && i4 !== -1 && i3 > i4) {\n\t\t\t\t\terrors.push(_create_error('no-meta', 'Invalid Specification (\"requires()\" after \"exports()\").'));\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn {\n\t\t\t\terrors: errors,\n\t\t\t\tresult: result\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\n\treturn Module;\n\n}"}}},"features":{"Storage":"function","localStorage":{}}}});
	if (environment !== null) {
		environment.init();
	}

	lychee.ENVIRONMENTS['/libraries/strainer/dist'] = environment;

})(lychee, typeof global !== 'undefined' ? global : this);

